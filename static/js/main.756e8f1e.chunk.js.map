{"version":3,"sources":["serviceWorker.js","utils/constants.js","database/index.js","utils/index.js","useGlobalState.js","components/Header.jsx","components/Toaster.jsx","components/FormInput.jsx","components/FormAutocomplete.jsx","components/FormAutocompleteMulti.jsx","components/FormAttributes.jsx","components/FormAlignment.jsx","components/FormCheckbox.jsx","components/Form.jsx","components/Refreshing.jsx","components/CodeDialog.jsx","firebase/index.js","components/ImportDialog.jsx","components/PrintDialog.jsx","components/SaveDialog.jsx","components/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","SCREENS","FORM","Symbol","PRINT","REFRESH","DIALOGS","CODE","IMPORT","SAVE","ATTRIBUTES","str","dex","con","int","wis","cha","TYPES","ALIGNMENT","ALIGNMENT_POSITION","BACKSTORY","CHARACTER_NAME","CLASS","DATE","FAMILIAR","FAMILIAR_NAME","FAMILIAR_POWER","FIENDS","FIENDS_BANISHED","GENDER","GOLD","MARKET_ARMOR","MARKET_WEAPON","MARKET_SKILL","MARKET_SCROLL","MARKET_TRAIT","MINION","MONSTER","MONSTER_ATTACK","MONSTER_LOCATION","MONSTER_OBSTACLE","MONSTER_SCORE","MONSTER_LENTICULAR","PLAYER","RACE","SCORE","XP","GLOBAL_STATE_ALIAS","FORM_LABELS","typeaheadCache","marketCahce","adventureCache","switcher","ALIGNMENTS","BACKSTORIES","CLASSES","FAMILIARS","GENDERS","filterDataByKind","MARKET","MINIONS","ADVENTURE","RACES","getTypeahead","type","undefined","data","typeheadData","Object","values","map","entry","value","id","text","name","sortedTypeaheadData","orderBy","getAdventureTypeahead","monsterName","reduce","acc","monster","push","getHashData","kind","cache","forEach","card","removeFalsy","item","determineCharacterCompletion","tome","characterName","player","race","class","backstory","alignment","attributes","some","attr","monsterLocation","monsterObstacle","monsterAttack","familiar","familiarPower","getCharacterJsonApi","character","gender","getAttributeScores","getRPAAttributeScores","getAlignmentScore","alignmentPos","items","armor","sort","filter","weapons","scrolls","skills","traits","battle","isLenticularVersion","obstacle","attack","minions","score","Number","monsterScore","species","familiarName","power","fiends","active","banished","fiendsBanished","counts","experience","xp","gold","health","getHealth","meta","date","Date","getMonsterAdventureData","dict","typeahead","getCharacterTextString","result","getLine","length","separator","Array","fill","join","addSection","title","sLine","toUpperCase","addSubSection","ssLine","addText","addListItem","addList","list","i","titleLine","addTitle","attributesObj","raceId","rpAttributes","rpaAttributes","addDice","getCombinedAttributeScores","addLine","alignmentObj","num","addLineBreak","raceData","getAttrValue","val","alignmentId","position","aligmentData","split","titles","0","1","2","3","4","5","6","7","8","fiendsCount","getTodaysDate","now","day","getDate","month","getMonth","year","getFullYear","getEntryById","o","initialState","activeDialog","screen","color","toaster","characterObject","deserializedCharacter","isCharacterGenerated","isCharacterComplete","isSavingEnabled","characterId","createGlobalState","useGlobalState","setGlobalStateCGS","setGlobalState","setState","resetGlobalState","setTimeout","getCompleteGlobalState","getState","setCompleteGlobalState","Header","setActiveDialog","setIsSavingEnabled","useState","saveClickCount","setSaveClickCount","iconColor","className","IconButton","aria-label","onClick","style","v","Toaster","setToater","isActive","setIsActive","useEffect","closeToaster","Snackbar","open","autoHideDuration","onClose","Alert","severity","elevation","variant","message","FormInput","inputType","classModifier","setEntry","FormControl","TextField","label","onChange","event","target","defaultValue","FormAutocomplete","isDisabled","entryDict","entryTypeahead","Autocomplete","options","getOptionLabel","option","getOptionSelected","renderInput","params","onInputChange","index","getAttribute","_","selectedEntry","disabled","autoHighlight","FormAutocompleteMulti","ids","multiple","includes","filterSelectedOptions","newInput","FormAttributes","entries","key","Attribute","modifier","setAttributes","total","s","readOnly","min","max","FormAlignment","setAlignment","setAlignmentPos","alignmentDict","alignmentTypeahead","handleChangeAlignmentPos","alignmentGridPlaceholder","alignmentModifiers","activeModifiers","activeClass","FormCheckbox","FormControlLabel","control","Checkbox","checked","Form","characterClass","setColor","adventureData","setAdventureData","classId","getClassColor","CircularProgressWithLabel","Box","display","CircularProgress","top","left","bottom","right","alignItems","justifyContent","Typography","component","Math","round","Refreshing","progress","setProgress","timer","setInterval","prevProgress","REFRESH_TIMER","clearInterval","Transition","forwardRef","props","ref","Slide","direction","CodeDialog","setCharacterObject","setIsCharacterComplete","setIsCharacterGenerated","referenceObj","err","console","error","handleCloseDialog","saveTextFile","useCallback","a","document","createElement","file","Blob","href","URL","createObjectURL","toLowerCase","download","click","Dialog","TransitionComponent","keepMounted","DialogTitle","DialogContent","JSON","stringify","DialogActions","Button","fb","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","API_FUNCTIONS","functions","API","database","getCharacters","httpsCallable","ImportDialog","setScreen","isLoading","setIsLoading","selectedCharacterId","setSelectedCharacterId","characters","setCharacters","response","handleSelectCharacter","selectedClass","c","state","alternativeLenticularVersion","isArray","loadCharacterFromDatabase","PrintDialog","handlePrint","localStorage","setItem","DialogContentText","saveCharacter","updateCharacter","SaveDialog","setCharacterId","setDeserializedCharacter","setToaster","isLoggedIn","setIsLoggedIn","pw","setPW","email","setEmail","deserializeCharacter","handleSave","Error","e","activeComponent","activeDialogComponent","App","Container","maxWidth","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.756e8f1e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const SCREENS = {\n  FORM: Symbol('FORM'),\n  PRINT: Symbol('PRINT'),\n  REFRESH: Symbol('REFRESH'),\n};\n\nexport const DIALOGS = {\n  CODE: Symbol('CODE'),\n  PRINT: Symbol('PRINT'),\n  IMPORT: Symbol('IMPORT'),\n  SAVE: Symbol('SAVE'),\n};\n\nexport const GENDERS = {\n  FEMALE: 'FEMALE',\n  MALE: 'MALE',\n  UNKNOWN: 'UNKNOWN',\n};\n\nexport const REFRESH_TIMER = 800;\n\nexport const ATTRIBUTES = {\n  str: 'Strength',\n  dex: 'Dexterity',\n  con: 'Constitution',\n  int: 'Intelligence',\n  wis: 'Wisdom',\n  cha: 'Charisma',\n};\n\nexport const TYPES = {\n  ALIGNMENT: Symbol('ALIGNMENT'),\n  ALIGNMENT_POSITION: Symbol('ALIGNMENT_POSITION'),\n  ATTRIBUTES: Symbol('ATTRIBUTES'),\n  BACKSTORY: Symbol('BACKSTORY'),\n  CHARACTER_NAME: Symbol('CHARACTER_NAME'),\n  CLASS: Symbol('CLASS'),\n  DATE: Symbol('DATE'),\n  FAMILIAR: Symbol('FAMILIAR'),\n  FAMILIAR_NAME: Symbol('FAMILIAR_NAME'),\n  FAMILIAR_POWER: Symbol('FAMILIAR_POWER'),\n  FIENDS: Symbol('FIENDS'),\n  FIENDS_BANISHED: Symbol('FIENDS_BANISHED'),\n  GENDER: Symbol('GENDER'),\n  GOLD: Symbol('GOLD'),\n  MARKET_ARMOR: Symbol('MARKET_ARMOR'),\n  MARKET_WEAPON: Symbol('MARKET_WEAPON'),\n  MARKET_SKILL: Symbol('MARKET_SKILL'),\n  MARKET_SCROLL: Symbol('MARKET_SCROLL'),\n  MARKET_TRAIT: Symbol('MARKET_TRAIT'),\n  MINION: Symbol('MINION'),\n  MONSTER: Symbol('MONSTER'),\n  MONSTER_ATTACK: Symbol('MONSTER_ATTACK'),\n  MONSTER_LOCATION: Symbol('MONSTER_LOCATION'),\n  MONSTER_OBSTACLE: Symbol('MONSTER_OBSTACLE'),\n  MONSTER_SCORE: Symbol('MONSTER_SCORE'),\n  MONSTER_LENTICULAR: Symbol('MONSTER_LENTICULAR'),\n  PLAYER: Symbol('PLAYER'),\n  RACE: Symbol('RACE'),\n  SCORE: Symbol('SCORE'),\n  XP: Symbol('XP'),\n};\n\nexport const GLOBAL_STATE_ALIAS = {\n  [TYPES.ALIGNMENT]: 'alignment',\n  [TYPES.ALIGNMENT_POSITION]: 'alignmentPos',\n  [TYPES.ATTRIBUTES]: 'attributes',\n  [TYPES.XP]: 'xp',\n  [TYPES.RACE]: 'race',\n  [TYPES.CLASS]: 'class',\n  [TYPES.CHARACTER_NAME]: 'characterName',\n  [TYPES.DATE]: 'date',\n  [TYPES.FAMILIAR]: 'familiar',\n  [TYPES.FAMILIAR_NAME]: 'familiarName',\n  [TYPES.FAMILIAR_POWER]: 'familiarPower',\n  [TYPES.FIENDS]: 'fiends',\n  [TYPES.FIENDS_BANISHED]: 'fiendsBanished',\n  [TYPES.GENDER]: 'gender',\n  [TYPES.GOLD]: 'gold',\n  [TYPES.BACKSTORY]: 'backstory',\n  [TYPES.MARKET_ARMOR]: 'armor',\n  [TYPES.MARKET_WEAPON]: 'weapons',\n  [TYPES.MARKET_SKILL]: 'skills',\n  [TYPES.MARKET_SCROLL]: 'scrolls',\n  [TYPES.MARKET_TRAIT]: 'traits',\n  [TYPES.MINION]: 'minions',\n  [TYPES.MONSTER]: 'monster',\n  [TYPES.MONSTER_ATTACK]: 'monsterAttack',\n  [TYPES.MONSTER_LOCATION]: 'monsterLocation',\n  [TYPES.MONSTER_OBSTACLE]: 'monsterObstacle',\n  [TYPES.MONSTER_SCORE]: 'monsterScore',\n  [TYPES.MONSTER_LENTICULAR]: 'isLenticularVersion',\n  [TYPES.PLAYER]: 'player',\n  [TYPES.SCORE]: 'score',\n  [TYPES.XP]: 'xp',\n};\n\nexport const FORM_LABELS = {\n  [TYPES.RACE]: 'Race',\n  [TYPES.CLASS]: 'Class',\n  [TYPES.CHARACTER_NAME]: 'Character Name',\n  [TYPES.DATE]: 'Date',\n  [TYPES.FAMILIAR]: 'Familiar',\n  [TYPES.FAMILIAR_NAME]: 'Familiar Name',\n  [TYPES.FAMILIAR_POWER]: 'Power',\n  [TYPES.FIENDS]: 'Fiends',\n  [TYPES.FIENDS_BANISHED]: 'Banished Fiends',\n  [TYPES.GENDER]: 'Gender',\n  [TYPES.GOLD]: 'Gold',\n  [TYPES.BACKSTORY]: 'Backstory',\n  [TYPES.MARKET_ARMOR]: 'Armor',\n  [TYPES.MARKET_WEAPON]: 'Weapons',\n  [TYPES.MARKET_SKILL]: 'Skills',\n  [TYPES.MARKET_SCROLL]: 'Scrolls',\n  [TYPES.MARKET_TRAIT]: 'Traits',\n  [TYPES.MINION]: 'Trophies (Minions)',\n  [TYPES.MONSTER]: 'Monster',\n  [TYPES.MONSTER_ATTACK]: 'Attack',\n  [TYPES.MONSTER_LOCATION]: 'Location',\n  [TYPES.MONSTER_OBSTACLE]: 'Obstacle',\n  [TYPES.MONSTER_SCORE]: 'Monster Score',\n  [TYPES.MONSTER_LENTICULAR]: 'Lenticular Version',\n  [TYPES.PLAYER]: 'Player',\n  [TYPES.SCORE]: 'Final Score',\n  [TYPES.XP]: 'XP',\n};\n","import { orderBy } from 'lodash-es';\n\n// Data\nimport ADVENTURE from './adventure.json';\nimport ALIGNMENTS from './alignments.json';\nimport BACKSTORIES from './backstories.json';\nimport CLASSES from './classes.json';\nimport FAMILIARS from './familiars.json';\nimport FIENDS from './fiends.json';\nimport GENDERS from './genders.json';\nimport MARKET from './market.json';\nimport MINIONS from './minions.json';\nimport MONSTER from './monsters.json';\nimport RACES from './races.json';\n\n// Utils\nimport { TYPES } from '../utils/constants';\n\nconst typeaheadCache = {};\nconst marketCahce = {};\nconst adventureCache = {};\n\nconst switcher = {\n  [TYPES.ALIGNMENT]: ALIGNMENTS,\n  [TYPES.BACKSTORY]: BACKSTORIES,\n  [TYPES.CLASS]: CLASSES,\n  [TYPES.FAMILIAR]: FAMILIARS,\n  [TYPES.FIENDS]: FIENDS,\n  [TYPES.FIENDS_BANISHED]: FIENDS,\n  [TYPES.GENDER]: GENDERS,\n  [TYPES.MARKET_ARMOR]: filterDataByKind('Armor', MARKET, marketCahce),\n  [TYPES.MARKET_SCROLL]: filterDataByKind('Scroll', MARKET, marketCahce),\n  [TYPES.MARKET_SKILL]: filterDataByKind('Skill', MARKET, marketCahce),\n  [TYPES.MARKET_TRAIT]: filterDataByKind('Trait', MARKET, marketCahce),\n  [TYPES.MARKET_WEAPON]: filterDataByKind('Weapon', MARKET, marketCahce),\n  [TYPES.MINION]: MINIONS,\n  [TYPES.MONSTER]: MONSTER,\n  [TYPES.MONSTER_LOCATION]: filterDataByKind('location', ADVENTURE, adventureCache),\n  [TYPES.MONSTER_OBSTACLE]: filterDataByKind('obstacle', ADVENTURE, adventureCache),\n  [TYPES.MONSTER_ATTACK]: filterDataByKind('attack', ADVENTURE, adventureCache),\n  [TYPES.RACE]: RACES,\n};\n\nexport function getTypeahead(type) {\n  if (typeaheadCache[type] === undefined) {\n    const data = switcher[type];\n\n    const typeheadData = Object.values(data).map((entry) => ({\n      value: entry.id,\n      text: entry.name,\n    }));\n\n    const sortedTypeaheadData = orderBy(typeheadData, 'text');\n\n    typeaheadCache[type] = sortedTypeaheadData;\n  }\n\n  return typeaheadCache[type];\n}\n\nexport function getAdventureTypeahead(data, monsterName) {\n  return Object.values(data).reduce((acc, entry) => {\n    if (entry.monster === monsterName) {\n      acc.push({\n        value: entry.id,\n        text: entry.name,\n      });\n    }\n    return acc;\n  }, []);\n}\n\nexport function getHashData(type) {\n  return switcher[type];\n}\n\nfunction filterDataByKind(kind, data, cache) {\n  if (cache[kind] === undefined) {\n    Object.values(data).forEach((card) => {\n      if (cache[card.kind] === undefined) {\n        cache[card.kind] = {};\n      }\n\n      cache[card.kind][card.id] = card;\n    });\n  }\n\n  return cache[kind];\n}\n","import { getHashData, getAdventureTypeahead } from '../database';\nimport { TYPES } from './constants';\n\nconst removeFalsy = (item) => item;\n\n/**\n * Check if all required fields in a character object are filled\n * @param {object} tome the object with the tome data\n * @returns {boolean}\n */\nexport function determineCharacterCompletion(tome) {\n  // If text fields are empty\n  if (!tome.characterName || !tome.player) return false;\n\n  // If mandatory fields are empty\n  if (!tome.race || !tome.class || !tome.backstory || !tome.alignment) return false;\n\n  // If attributes are less than 3\n  if (Object.values(tome.attributes).some((attr) => attr < 3)) return false;\n\n  // If monster, but no location, obstacle, or attack\n  if (tome.monster && (!tome.monsterLocation || !tome.monsterObstacle || !tome.monsterAttack))\n    return false;\n\n  // If has familiar, but power is less then 3\n  if (tome.familiar && tome.familiarPower < 3) return false;\n\n  return true;\n}\n\n/**\n * Parses a character tome object to be database ready before saving\n * @param {object} tome the object with the tome data\n * @returns {object}\n */\nexport function deserializeCharacter(tome) {\n  const result = {\n    id: tome.characterId,\n    name: tome.characterName,\n    race: tome.race,\n    class: tome.class,\n    gender: tome.gender,\n    backstory: tome.backstory,\n    'attribute-scores': tome.attributes,\n    alignment: {\n      id: tome.alignment,\n      position: Number(tome.alignmentPos),\n    },\n    items: {\n      armor: tome.armor?.sort(),\n      weapons: tome.weapons?.sort(),\n      scrolls: tome.scrolls?.sort(),\n    },\n    skills: tome.skills?.sort(),\n    traits: tome.traits?.sort(),\n    battle: {\n      monster: tome.monster,\n      alternativeLenticularVersion: tome.isLenticularVersion || null,\n      location: tome.monsterLocation,\n      obstacle: tome.monsterObstacle,\n      attack: tome.monsterAttack,\n      minions: tome.minions?.sort(),\n      score: Number(tome.monsterScore),\n    },\n    fiends: {\n      active: tome.fiends?.sort(),\n      banished: tome.fiendsBanished?.sort(),\n    },\n    counts: {\n      experience: Number(tome.xp),\n      gold: Number(tome.gold),\n      score: Number(tome.score),\n    },\n    player: tome.player,\n    'created-at': tome.date ?? getTodaysDate(),\n  };\n\n  if (tome.familiar) {\n    result.familiar = {\n      id: tome.familiar,\n      name: tome.familiarName ?? 'Unnamed',\n      power: Number(tome.familiarPower),\n    };\n  }\n\n  return result;\n}\n\n/**\n * Parses a character tome object to JsonApi format\n * @param {object} tome the object with the tome data\n * @return {object}\n */\nexport function getCharacterJsonApi(tome) {\n  return {\n    id: tome.character ?? null,\n    type: 'roll-player-character',\n    attributes: {\n      name: tome.characterName,\n      race: getHashData(TYPES.RACE)[tome.race]?.name ?? '',\n      class: getHashData(TYPES.CLASS)[tome.class]?.name ?? '',\n      gender: getHashData(TYPES.GENDER)[tome.gender]?.name ?? 'Unkown',\n      backstory: getHashData(TYPES.BACKSTORY)[tome.backstory]?.name ?? '',\n      'attribute-rp-scores': getAttributeScores(tome.attributes, tome.race),\n      'attribute-rpa-scores': getRPAAttributeScores(tome.attributes, tome.race),\n      alignment: getAlignmentScore(tome.alignment, tome.alignmentPos),\n      items: {\n        armor: tome.armor\n          .map((id) => getHashData(TYPES.MARKET_ARMOR)[id]?.name ?? '')\n          .sort()\n          .filter(removeFalsy),\n        weapons: tome.weapons\n          .map((id) => getHashData(TYPES.MARKET_WEAPON)[id]?.name ?? '')\n          .sort()\n          .filter(removeFalsy),\n        scrolls: tome.scrolls\n          .map((id) => getHashData(TYPES.MARKET_SCROLL)[id]?.name ?? null)\n          .sort()\n          .filter(removeFalsy),\n      },\n      skills: tome.skills\n        .map((id) => getHashData(TYPES.MARKET_SKILL)[id]?.name ?? '')\n        .sort()\n        .filter(removeFalsy),\n      traits: tome.traits\n        .map((id) => getHashData(TYPES.MARKET_TRAIT)[id]?.name ?? '')\n        .sort()\n        .filter(removeFalsy),\n      battle: {\n        monster: `${getHashData(TYPES.MONSTER)[tome.monster]?.name ?? ''}${\n          tome.isLenticularVersion ? ' (Lenticular version)' : ''\n        }`,\n        location: getHashData(TYPES.MONSTER_LOCATION)[tome.monsterLocation]?.name ?? '',\n        obstacle: getHashData(TYPES.MONSTER_OBSTACLE)[tome.monsterObstacle]?.name ?? '',\n        attack: getHashData(TYPES.MONSTER_ATTACK)[tome.monsterAttack]?.name ?? '',\n        minions: tome.minions\n          .map((id) => getHashData(TYPES.MINION)[id]?.name ?? '')\n          .sort()\n          .filter(removeFalsy),\n        score: Number(tome.monsterScore) ?? 0,\n      },\n      familiar: {\n        species: getHashData(TYPES.FAMILIAR)[tome.familiar]?.name ?? '',\n        name: tome.familiarName,\n        power: Number(tome.familiarPower),\n      },\n      fiends: {\n        active: tome.fiends\n          .map((id) => getHashData(TYPES.FIENDS)[id]?.name ?? '')\n          .sort()\n          .filter(removeFalsy),\n        banished: tome.fiendsBanished\n          .map((id) => getHashData(TYPES.FIENDS)[id]?.name ?? '')\n          .sort()\n          .filter(removeFalsy),\n      },\n      counts: {\n        experience: Number(tome.xp),\n        gold: Number(tome.gold),\n        score: Number(tome.score),\n        health: getHealth(tome.score, tome.fiends),\n      },\n    },\n    meta: {\n      'created-by': tome.player,\n      'created-at': tome.date ?? new Date(),\n    },\n  };\n}\n\n/**\n * Gets the specific adventure data (location, obstable, attack) based on the given monster name\n * @param {symbol} type the type symbol\n * @param {string} monsterName the monster name\n * @returns {object} the hash dictionary and typeahead for the adventure type\n */\nexport function getMonsterAdventureData(type, monsterName) {\n  const dict = getHashData(type);\n  return {\n    dict,\n    typeahead: getAdventureTypeahead(dict, monsterName),\n  };\n}\n\nexport function getCharacterTextString(tome) {\n  let result = '';\n\n  function getLine(length, separator = '-') {\n    return `${new Array(length).fill(separator).join('')}`;\n  }\n\n  function addLine(length = 15) {\n    result += getLine(length);\n  }\n\n  function addTitle(title) {\n    const titleLine = getLine(title.length, '=');\n    result += `\\n${titleLine}\\n${title.toUpperCase()}\\n${titleLine}\\n\\n`;\n  }\n\n  function addSection(title) {\n    const sLine = getLine(title.length, '-');\n    result += `\\n${sLine.toUpperCase()}\\n${title.toUpperCase()}\\n${sLine}\\n\\n`;\n  }\n\n  function addSubSection(title) {\n    const ssLine = getLine(title.length, '-');\n    result += `\\n${title.toUpperCase()}\\n${ssLine}\\n\\n`;\n  }\n\n  function addText(text) {\n    result += `${text}\\n`;\n  }\n\n  function addListItem(item) {\n    result += `    - ${item}\\n`;\n  }\n\n  function addList(list = []) {\n    if (list.length === 0) {\n      result += 'N/A\\n';\n    } else {\n      for (let i = 0; i < list.length; i++) {\n        addListItem(list[i]);\n      }\n    }\n  }\n\n  function addLineBreak(num = 1) {\n    for (let i = 0; i < num; i++) {\n      result += '\\n';\n    }\n  }\n\n  // BUILD\n  addTitle('Roll Player Hero Tome');\n  addText(`Created by ${tome.player} on ${tome.date}`);\n  addSection(`Character: ${tome.characterName}`);\n  addText(`Race: ${getHashData(TYPES.RACE)[tome.race]?.name}`);\n  addText(`Class: ${getHashData(TYPES.CLASS)[tome.class]?.name}`);\n  addText(`Gender: ${getHashData(TYPES.GENDER)[tome.gender]?.name}`);\n  addText(`Backstory: ${getHashData(TYPES.BACKSTORY)[tome.backstory]?.name}`);\n  addSubSection('Attributes');\n  const attributesObj = getCombinedAttributeScores(tome.attributes, tome.race);\n  addText(`STR = ${attributesObj.str[1]} (${attributesObj.str[0]})`);\n  addText(`DEX = ${attributesObj.dex[1]} (${attributesObj.dex[0]})`);\n  addText(`CON = ${attributesObj.con[1]} (${attributesObj.con[0]})`);\n  addText(`INT = ${attributesObj.int[1]} (${attributesObj.int[0]})`);\n  addText(`WIS = ${attributesObj.wis[1]} (${attributesObj.wis[0]})`);\n  addText(`CHA = ${attributesObj.cha[1]} (${attributesObj.cha[0]})`);\n  if (attributesObj.addDice) {\n    addLine(\n      `\\n// Add ${attributesObj.addDice} to any attribute score before playing Roll Player Adventures`\n    );\n  }\n  addSubSection('Alignment');\n  const alignmentObj = getAlignmentScore(tome.alignment, tome.alignmentPos);\n  addText(`${alignmentObj.name} (${alignmentObj.title})`);\n  addText(`Points: ${alignmentObj.score}`);\n  addSection('Stats');\n  addListItem(`Health: ${getHealth(tome.score, tome.fiends)}`);\n  addListItem(`Experience: ${tome.xp}`);\n  addListItem(`Gold: ${tome.gold}`);\n  addSection('Items/Abilities');\n  addSubSection('Armor');\n  addList(tome.armor.map((id) => getHashData(TYPES.MARKET_ARMOR)[id]?.name ?? '').sort());\n  addSubSection('Weapons');\n  addList(tome.weapons.map((id) => getHashData(TYPES.MARKET_WEAPON)[id]?.name ?? '').sort());\n  addSubSection('Scrolls');\n  addList(tome.scrolls.map((id) => getHashData(TYPES.MARKET_SCROLL)[id]?.name ?? '').sort());\n  addSubSection('Skills');\n  addList(tome.skills.map((id) => getHashData(TYPES.MARKET_SKILL)[id]?.name ?? '').sort());\n  addSubSection('Traits');\n  addList(tome.traits.map((id) => getHashData(TYPES.MARKET_TRAIT)[id]?.name ?? '').sort());\n  addSection('Familiar');\n  if (tome.familiarName) {\n    addText(\n      `${tome.familiarName}, the ${\n        getHashData(TYPES.FAMILIAR)[tome.familiar]?.species ?? ''\n      } (Power: ${tome.familiarPower})`\n    );\n  } else {\n    addText(\n      `${getHashData(TYPES.FAMILIAR)[tome.familiar]?.species ?? ''} (Power: ${tome.familiarPower})`\n    );\n  }\n  addSection('Enemies');\n  addSubSection(`Monter: ${getHashData(TYPES.MONSTER)[tome.monster]?.name ?? ''}`);\n  addListItem(`Location: ${getHashData(TYPES.MONSTER_LOCATION)[tome.monsterLocation]?.name ?? ''}`);\n  addListItem(`Obstacle: ${getHashData(TYPES.MONSTER_OBSTACLE)[tome.monsterObstacle]?.name ?? ''}`);\n  addListItem(`Attack: ${getHashData(TYPES.MONSTER_ATTACK)[tome.monsterAttack]?.name ?? ''}`);\n  addListItem(`Monster Score: ${tome.monsterScore || 'Unknown'}`);\n  addSubSection('Minions');\n  addList(tome.minions.map((id) => getHashData(TYPES.MINION)[id]?.name ?? '').sort());\n  addSubSection('Fiends');\n  addList(tome.fiends.map((id) => getHashData(TYPES.FIENDS)[id]?.name ?? '').sort());\n  addLineBreak(2);\n  addSection('Final Score');\n  addText(`${tome.score} reputation stars`);\n  return result;\n}\n\nfunction getAttributeScores(attributes, raceId) {\n  const raceData = getHashData(TYPES.RACE)?.[raceId];\n\n  return {\n    str: (attributes.str ?? 0) + (raceData?.str ?? 0),\n    dex: (attributes.dex ?? 0) + (raceData?.dex ?? 0),\n    con: (attributes.con ?? 0) + (raceData?.con ?? 0),\n    int: (attributes.int ?? 0) + (raceData?.int ?? 0),\n    wis: (attributes.wis ?? 0) + (raceData?.wis ?? 0),\n    cha: (attributes.cha ?? 0) + (raceData?.cha ?? 0),\n  };\n}\n\nfunction getRPAAttributeScores(attributes, raceId) {\n  const rpAttributes = getAttributeScores(attributes, raceId);\n\n  function getAttrValue(val) {\n    if (val < 14) return 0;\n    if (val < 16) return 1;\n    if (val < 18) return 2;\n    return 3;\n  }\n\n  return {\n    str: getAttrValue(rpAttributes.str),\n    dex: getAttrValue(rpAttributes.dex),\n    con: getAttrValue(rpAttributes.con),\n    int: getAttrValue(rpAttributes.int),\n    wis: getAttrValue(rpAttributes.wis),\n    cha: getAttrValue(rpAttributes.cha),\n  };\n}\n\nfunction getCombinedAttributeScores(attributes, raceId) {\n  const rpAttributes = getAttributeScores(attributes, raceId);\n  const rpaAttributes = getRPAAttributeScores(attributes, raceId);\n\n  const addDice = Object.values(rpaAttributes).reduce((acc, entry) => {\n    acc -= entry;\n    if (acc < 0) acc = 0;\n    return acc;\n  }, 6);\n\n  return {\n    str: [rpAttributes.str, rpaAttributes.str],\n    dex: [rpAttributes.dex, rpaAttributes.dex],\n    con: [rpAttributes.con, rpaAttributes.con],\n    int: [rpAttributes.int, rpaAttributes.int],\n    wis: [rpAttributes.wis, rpaAttributes.wis],\n    cha: [rpAttributes.cha, rpaAttributes.cha],\n    addDice,\n  };\n}\n\nfunction getAlignmentScore(alignmentId, position = 4) {\n  const aligmentData = getHashData(TYPES.ALIGNMENT)?.[alignmentId];\n\n  const values = aligmentData?.values?.split(',').map(Number) ?? [];\n\n  const titles = {\n    0: 'Lawful-Good',\n    1: 'Neutral-Good',\n    2: 'Chaotic-Good',\n    3: 'Lawful-Neutral',\n    4: 'Neutraul-Neutral',\n    5: 'Chaotic-Neutral',\n    6: 'Lawful-Evil',\n    7: 'Neutral-Evil',\n    8: 'Chaotic-Evil',\n  };\n\n  return {\n    name: aligmentData?.name ?? '',\n    title: titles[position],\n    score: values[position],\n  };\n}\n\nfunction getHealth(score, fiends) {\n  const fiendsCount = fiends.length;\n\n  if (score < 21) return 14 - fiendsCount;\n  if (score < 26) return 15 - fiendsCount;\n  if (score < 36) return 16 - fiendsCount;\n  if (score < 41) return 17 - fiendsCount;\n  return 18 - fiendsCount;\n}\n\nexport function loadCharacterFromDatabase(characters, id, initialState) {\n  // Find character\n  const character = characters.filter((c) => c.id === id)[0];\n\n  const state = {\n    ...initialState,\n    alignment: character.alignment.id,\n    alignmentPos: character.alignment.position,\n    armor: character?.items?.armor ?? [],\n    attributes: {\n      str: character['attribute-scores'].str ?? 0,\n      dex: character['attribute-scores'].dex ?? 0,\n      con: character['attribute-scores'].con ?? 0,\n      int: character['attribute-scores'].int ?? 0,\n      wis: character['attribute-scores'].wis ?? 0,\n      cha: character['attribute-scores'].cha ?? 0,\n    },\n    backstory: character.backstory,\n    characterId: character.id,\n    characterName: character.name,\n    class: character.class,\n    date: character['created-at'],\n    familiar: character?.familiar?.id ?? null,\n    familiarPower: Number(character?.familiar?.power ?? 0),\n    familiarName: character?.familiar?.name ?? null,\n    gender: character.gender,\n    gold: Number(character.counts.gold),\n    minions: character?.battle?.minions ?? [],\n    monster: character?.battle?.monster ?? null,\n    monsterAttack: character?.battle?.attack ?? null,\n    monsterLocation: character?.battle?.location ?? null,\n    monsterObstacle: character?.battle?.obstacle ?? null,\n    monsterScore: character?.battle?.score ?? 0,\n    isLenticularVersion: character?.battle?.alternativeLenticularVersion ?? false,\n    player: character?.player,\n    race: character.race,\n    score: Number(character.counts.score),\n    scrolls: character?.items?.scrolls ?? [],\n    skills: character?.skills ?? [],\n    traits: character?.traits ?? [],\n    weapons: character?.items?.weapons ?? [],\n    xp: 0,\n  };\n\n  if (character.fiends) {\n    if (Array.isArray(character.fiends)) {\n      state.fiends = character?.fiends ?? [];\n    } else {\n      state.fiends = character?.fiends?.active ?? [];\n      state.fiendsBanished = character?.fiends?.banished ?? [];\n    }\n  }\n\n  return state;\n}\n\nexport function getTodaysDate() {\n  const now = new Date();\n  let day = now.getDate();\n  let month = now.getMonth() + 1;\n  const year = now.getFullYear();\n\n  if (month < 10) month = `0${month}`;\n  if (day < 10) day = `0${day}`;\n\n  return `${year}-${month}-${day}`;\n}\n\nexport function getEntryById(list, id) {\n  return list.filter((o) => o.value === id)[0];\n}\n\nexport function getEntriesByIds(list, ids) {\n  return list.filter((o) => ids.includes(o.value));\n}\n\nexport function getClassColor(classId) {\n  return getHashData(TYPES.CLASS)[classId]?.color ?? null;\n}\n","import { createGlobalState } from 'react-hooks-global-state';\n\nimport { SCREENS, REFRESH_TIMER } from './utils/constants';\nimport { getTodaysDate } from './utils';\n\nexport const initialState = {\n  // App Global\n  activeDialog: null,\n  screen: SCREENS.FORM,\n  color: null,\n  toaster: null,\n\n  // App\n  characterObject: null,\n  deserializedCharacter: null,\n  isCharacterGenerated: false,\n  isCharacterComplete: false,\n  isSavingEnabled: false,\n\n  // Character Fields\n  characterId: null,\n  characterName: '',\n  player: '',\n  race: null,\n  class: null,\n  gender: null,\n  backstory: null,\n  attributes: {\n    str: 0,\n    dex: 0,\n    con: 0,\n    int: 0,\n    wis: 0,\n    cha: 0,\n  },\n  alignment: null,\n  alignmentPos: 4,\n  weapons: [],\n  armor: [],\n  skills: [],\n  traits: [],\n  scrolls: [],\n  minions: [],\n  xp: 0,\n  gold: 0,\n  score: 0,\n  date: getTodaysDate(),\n  familiar: null,\n  familiarName: null,\n  familiarPower: 0,\n  fiends: [],\n  fiendsBanished: [],\n  monster: null,\n  monsterLocation: null,\n  monsterObstacle: null,\n  monsterAttack: null,\n  monsterScore: 0,\n  isLenticularVersion: false,\n};\n\nconst { useGlobalState, setGlobalState: setGlobalStateCGS, setState, getState } = createGlobalState(\n  initialState\n);\n\nexport function resetGlobalState() {\n  setGlobalState('screen', SCREENS.REFRESH);\n  setTimeout(() => {\n    setState({ ...initialState });\n  }, REFRESH_TIMER);\n}\n\nexport const getCompleteGlobalState = getState;\n\nexport const setGlobalState = setGlobalStateCGS;\n\nexport const setCompleteGlobalState = setState;\n\nexport default useGlobalState;\n","import React, { Fragment, useState } from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport PrintIcon from '@material-ui/icons/Print';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CodeIcon from '@material-ui/icons/Code';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\n\nimport useGlobalState, { resetGlobalState } from '../useGlobalState';\nimport { DIALOGS } from '../utils/constants';\n\nexport default function Header() {\n  const [, setActiveDialog] = useGlobalState('activeDialog');\n  const [isSavingEnabled, setIsSavingEnabled] = useGlobalState('isSavingEnabled');\n  const [color] = useGlobalState('color');\n  // Local state\n  const [saveClickCount, setSaveClickCount] = useState(0);\n\n  const handleEditClick = () => {\n    if (!isSavingEnabled) {\n      setSaveClickCount((v) => ++v);\n      if (saveClickCount > 1) {\n        setIsSavingEnabled(true);\n      }\n    }\n  };\n\n  const handleOpenPrintDialog = () => {\n    setActiveDialog(DIALOGS.PRINT);\n  };\n\n  const handleOpenCodeDialog = () => {\n    setActiveDialog(DIALOGS.CODE);\n  };\n\n  const handleOpenImportDialog = () => {\n    setActiveDialog(DIALOGS.IMPORT);\n  };\n\n  const handleOpenSaveDialog = () => {\n    setActiveDialog(DIALOGS.SAVE);\n  };\n\n  const iconColor = color === 'white' || !color ? '#232c33' : '#ffffff';\n\n  return (\n    <header className={`header app-color--${color}`}>\n      <IconButton className=\"header-button\" aria-label=\"reset\" onClick={resetGlobalState}>\n        <RotateLeftIcon style={{ color: iconColor }} />\n      </IconButton>\n      <h1 onClick={handleEditClick}>Roll Player: Hero Tome</h1>\n      {isSavingEnabled && (\n        <Fragment>\n          <IconButton\n            className=\"header-button\"\n            aria-label=\"import\"\n            onClick={handleOpenImportDialog}\n          >\n            <ListAltIcon style={{ color: iconColor }} />\n          </IconButton>\n          <IconButton className=\"header-button\" aria-label=\"save\" onClick={handleOpenSaveDialog}>\n            <SaveIcon style={{ color: iconColor }} />\n          </IconButton>\n        </Fragment>\n      )}\n      <IconButton className=\"header-button\" aria-label=\"print\" onClick={handleOpenPrintDialog}>\n        <PrintIcon style={{ color: iconColor }} />\n      </IconButton>\n      <IconButton className=\"header-button\" aria-label=\"code\" onClick={handleOpenCodeDialog}>\n        <CodeIcon style={{ color: iconColor }} />\n      </IconButton>\n    </header>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function Toaster() {\n  // Global State\n  const [toaster, setToater] = useGlobalState('toaster');\n  // Local state\n  const [isActive, setIsActive] = useState(false);\n\n  // Activate toast bar whenever toaster changes\n  useEffect(() => {\n    setIsActive(Boolean(toaster));\n  }, [toaster]);\n\n  const closeToaster = () => {\n    setToater(null);\n  };\n\n  return (\n    <Snackbar open={isActive} autoHideDuration={4000} onClose={closeToaster}>\n      <Alert onClose={closeToaster} severity={toaster?.severity} elevation={6} variant=\"filled\">\n        {toaster?.message}\n      </Alert>\n    </Snackbar>\n  );\n}\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\n\nimport { GLOBAL_STATE_ALIAS, FORM_LABELS } from '../utils/constants';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function FormInput({ type, inputType = 'text', classModifier = '' }) {\n  // Global States\n  const [entry, setEntry] = useGlobalState(GLOBAL_STATE_ALIAS[type]);\n\n  const handleChange = (event) => {\n    setEntry(event.target.value);\n  };\n\n  return (\n    <FormControl className={`form-item form-item--text form-item--${classModifier}`}>\n      <TextField\n        id={GLOBAL_STATE_ALIAS[type]}\n        label={FORM_LABELS[type]}\n        onChange={handleChange}\n        defaultValue={entry}\n        type={inputType}\n      />\n    </FormControl>\n  );\n}\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport { getTypeahead, getHashData } from '../database';\nimport { getEntryById } from '../utils';\nimport { GLOBAL_STATE_ALIAS, FORM_LABELS } from '../utils/constants';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function FormAutocomplete({\n  type,\n  classModifier = '',\n  data = null,\n  isDisabled = false,\n}) {\n  // Global States\n  const [entry, setEntry] = useGlobalState(GLOBAL_STATE_ALIAS[type]);\n\n  let entryDict = {};\n  let entryTypeahead = [];\n\n  if (data) {\n    entryDict = data.dict;\n    entryTypeahead = data.typeahead;\n  } else {\n    entryDict = getHashData(type);\n    entryTypeahead = getTypeahead(type);\n  }\n\n  const handleInputChange = (event) => {\n    const index = event?.target.getAttribute('data-option-index');\n    if (entryTypeahead[index]) {\n      const id = entryTypeahead[index].value;\n      setEntry(id);\n    }\n  };\n\n  const handleChange = (_, selectedEntry) => {\n    if (entryDict[selectedEntry?.value]) {\n      setEntry(selectedEntry.value);\n    } else {\n      setEntry(null);\n    }\n  };\n\n  const label = FORM_LABELS[type];\n\n  return (\n    <FormControl className={`form-item form-item--autocomplete form-item--${classModifier}`}>\n      <Autocomplete\n        id={label}\n        options={entryTypeahead}\n        defaultValue={getEntryById(entryTypeahead, entry)}\n        getOptionLabel={(option) => option.text}\n        getOptionSelected={(option) => option.value === entryDict?.[entry]?.id}\n        renderInput={(params) => <TextField {...params} label={label} />}\n        onInputChange={handleInputChange}\n        onChange={handleChange}\n        disabled={isDisabled}\n        autoHighlight\n      />\n    </FormControl>\n  );\n}\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport { getTypeahead } from '../database';\nimport { getEntriesByIds } from '../utils';\nimport { GLOBAL_STATE_ALIAS, FORM_LABELS } from '../utils/constants';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function FormAutocompleteMulti({ type, classModifier = '' }) {\n  // Global States\n  const [entry, setEntry] = useGlobalState(GLOBAL_STATE_ALIAS[type]);\n\n  const entryTypeahead = getTypeahead(type);\n\n  const handleChange = (_, newInput) => {\n    const ids = newInput.map((o) => o.value);\n    setEntry(ids);\n  };\n\n  const label = FORM_LABELS[type];\n\n  return (\n    <FormControl className={`form-item form-item--autocomplete form-item--${classModifier}`}>\n      <Autocomplete\n        multiple\n        id={label}\n        options={entryTypeahead}\n        defaultValue={getEntriesByIds(entryTypeahead, entry)}\n        getOptionLabel={(option) => option.text}\n        filterSelectedOptions\n        renderInput={(params) => <TextField {...params} label={label} variant=\"outlined\" />}\n        onChange={handleChange}\n        autoHighlight\n      />\n    </FormControl>\n  );\n}\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\n\nimport { getHashData } from '../database';\nimport { ATTRIBUTES, TYPES } from '../utils/constants';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function FormAttributes() {\n  // Global States\n  const [attributes] = useGlobalState('attributes');\n  const [race] = useGlobalState('race');\n\n  const raceData = getHashData(TYPES.RACE)?.[race];\n\n  return (\n    <FormControl className={`form-item form-item--attributes form-item--half`}>\n      <div className=\"attributes-grid attribute-header\">\n        <span className=\"attribute-header-label\">Attributes</span>\n        <span className=\"attribute-header--label\">Attribute Score</span>\n        <span className=\"attribute-sign invisible\">-</span>\n        <span className=\"attribute-header--label\">Racial Modifier</span>\n        <span className=\"attribute-sign invisible\">-</span>\n        <span className=\"attribute-header--label\">Total</span>\n      </div>\n      {Object.entries(ATTRIBUTES).map(([key, name]) => {\n        return (\n          <Attribute\n            key={key}\n            type={key}\n            name={name}\n            modifier={raceData?.[key]}\n            value={attributes[key]}\n            isDisabled={!Boolean(race)}\n          />\n        );\n      })}\n    </FormControl>\n  );\n}\n\nfunction Attribute({ type, name, modifier, value, isDisabled }) {\n  // Global States\n  const [, setAttributes] = useGlobalState('attributes');\n\n  const handleChange = (event) => {\n    setAttributes((s) => ({ ...s, [type]: +event.target.value }));\n  };\n\n  const total = (value ?? 0) + (modifier ?? 0);\n\n  return (\n    <div className=\"attributes-grid attribute\">\n      <label className=\"attribute-label\">\n        <span className=\"attribute-label__key\">{type}</span>\n        <span className=\"attribute-label__name\">{name}</span>\n      </label>\n      <input\n        type=\"number\"\n        className=\"attribute-score\"\n        disabled={isDisabled}\n        defaultValue={value}\n        onChange={handleChange}\n      />\n      <span className=\"attribute-sign\">+</span>\n      <input type=\"number\" className=\"attribute-race-modifier\" value={modifier ?? 0} readOnly />\n      <span className=\"attribute-sign\">=</span>\n      <input\n        type=\"number\"\n        className=\"attribute-race-total\"\n        value={total}\n        min=\"0\"\n        max=\"30\"\n        readOnly\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport { getTypeahead, getHashData } from '../database';\nimport { getEntryById } from '../utils';\nimport { TYPES } from '../utils/constants';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function FormAlignment() {\n  // Global States\n  const [alignment, setAlignment] = useGlobalState('alignment');\n  const [alignmentPos, setAlignmentPos] = useGlobalState('alignmentPos');\n\n  const alignmentDict = getHashData(TYPES.ALIGNMENT);\n  const alignmentTypeahead = getTypeahead(TYPES.ALIGNMENT);\n\n  const handleInputChange = (event) => {\n    const index = event?.target.getAttribute('data-option-index');\n    if (alignmentTypeahead[index]) {\n      const id = alignmentTypeahead[index].value;\n      setAlignment(id);\n    }\n  };\n\n  const handleChange = (_, selectedEntry) => {\n    if (alignmentDict[selectedEntry?.value]) {\n      setAlignment(selectedEntry.value);\n    } else {\n      setAlignment(null);\n    }\n  };\n\n  const handleChangeAlignmentPos = (event) => {\n    setAlignmentPos(+event.target.id);\n  };\n\n  const alignmentGridPlaceholder = new Array(9).fill(0);\n\n  const alignmentModifiers = alignmentDict?.[alignment]?.values?.split(',').map(Number);\n\n  const activeModifiers = alignmentModifiers ?? alignmentGridPlaceholder;\n\n  return (\n    <FormControl className={`form-item form-item--alignment form-item--half`}>\n      <Autocomplete\n        id=\"alignment\"\n        options={alignmentTypeahead}\n        defaultValue={getEntryById(alignmentTypeahead, alignment)}\n        getOptionLabel={(option) => option.text}\n        getOptionSelected={(option) => option.value === alignmentDict?.[alignment]?.id}\n        renderInput={(params) => <TextField {...params} label=\"Alignment\" />}\n        onInputChange={handleInputChange}\n        onChange={handleChange}\n        autoHighlight\n      />\n      <div className=\"alignment-grid\">\n        <div className=\"alignment-grid__lawful\">Lawful</div>\n        <div className=\"alignment-grid__good\">Good</div>\n        <div className=\"alignment-grid__chaotic\">Chaotic</div>\n        <div className=\"alignment-grid__evil\">Evil</div>\n        <div className=\"alignment-grid__boxes\">\n          {activeModifiers.map((val, index) => {\n            const activeClass = alignmentPos === index ? 'alignment-box--active' : '';\n            return (\n              <button\n                className={`alignment-box ${activeClass}`}\n                id={`${index}`}\n                key={`al-key-${index}`}\n                onClick={handleChangeAlignmentPos}\n                disabled={!Boolean(alignment)}\n              >\n                {val}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </FormControl>\n  );\n}\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { GLOBAL_STATE_ALIAS, FORM_LABELS } from '../utils/constants';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function FormCheckbox({ type, classModifier = '' }) {\n  // Global States\n  const [entry, setEntry] = useGlobalState(GLOBAL_STATE_ALIAS[type]);\n\n  const handleChange = (event) => {\n    setEntry(event.target.checked);\n  };\n\n  return (\n    <FormControl className={`form-item form-item--checkbox form-item--${classModifier}`}>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={entry}\n            onChange={handleChange}\n            name={GLOBAL_STATE_ALIAS[type]}\n            color=\"primary\"\n          />\n        }\n        label={FORM_LABELS[type]}\n      />\n    </FormControl>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { getHashData } from '../database';\nimport { getMonsterAdventureData, getClassColor } from '../utils';\nimport { TYPES, GLOBAL_STATE_ALIAS } from '../utils/constants';\nimport useGlobalState from '../useGlobalState';\n\n// Components\nimport FormInput from './FormInput';\nimport FormAutocomplete from './FormAutocomplete';\nimport FormAutocompleteMulti from './FormAutocompleteMulti';\nimport FormAttributes from './FormAttributes';\nimport FormAlignment from './FormAlignment';\nimport FormCheckbox from './FormCheckbox';\n\nexport default function Form() {\n  const [monster] = useGlobalState(GLOBAL_STATE_ALIAS[TYPES.MONSTER]);\n  const [characterClass] = useGlobalState(GLOBAL_STATE_ALIAS[TYPES.CLASS]);\n  const [, setColor] = useGlobalState('color');\n  // LocalState\n  const [adventureData, setAdventureData] = useState(null);\n\n  // When a monster is selected, determine available adventure cards for it\n  useEffect(() => {\n    if (monster) {\n      const monsterName = getHashData(TYPES.MONSTER)[monster].name;\n\n      setAdventureData({\n        location: getMonsterAdventureData(TYPES.MONSTER_LOCATION, monsterName),\n        obstacle: getMonsterAdventureData(TYPES.MONSTER_OBSTACLE, monsterName),\n        attack: getMonsterAdventureData(TYPES.MONSTER_ATTACK, monsterName),\n      });\n    }\n  }, [monster]);\n\n  // When a class is selected, set the global color\n  useEffect(() => {\n    setColor(getClassColor(characterClass));\n  }, [characterClass, setColor]);\n\n  return (\n    <main className=\"form\">\n      <FormInput type={TYPES.CHARACTER_NAME} classModifier=\"half\" />\n      <FormInput type={TYPES.PLAYER} classModifier=\"half\" />\n      <FormAutocomplete type={TYPES.RACE} classModifier=\"quarter\" />\n      <FormAutocomplete type={TYPES.CLASS} classModifier=\"quarter\" />\n      <FormAutocomplete type={TYPES.GENDER} classModifier=\"quarter\" />\n      <FormAutocomplete type={TYPES.BACKSTORY} classModifier=\"quarter\" />\n      <FormAttributes />\n      <FormAlignment />\n      <FormAutocompleteMulti type={TYPES.MARKET_ARMOR} classModifier=\"half\" />\n      <FormAutocompleteMulti type={TYPES.MARKET_WEAPON} classModifier=\"half\" />\n      <FormAutocompleteMulti type={TYPES.MARKET_SKILL} classModifier=\"half\" />\n      <FormAutocompleteMulti type={TYPES.MARKET_TRAIT} classModifier=\"half\" />\n      <FormAutocompleteMulti type={TYPES.MARKET_SCROLL} classModifier=\"half\" />\n      <FormAutocompleteMulti type={TYPES.MINION} classModifier=\"half\" />\n      <hr />\n      <FormAutocomplete type={TYPES.MONSTER} classModifier=\"half\" />\n      <FormCheckbox type={TYPES.MONSTER_LENTICULAR} classModifier=\"half\" />\n      <FormAutocomplete\n        type={TYPES.MONSTER_LOCATION}\n        classModifier=\"quarter\"\n        isDisabled={!monster}\n        data={adventureData?.location}\n      />\n      <FormAutocomplete\n        type={TYPES.MONSTER_OBSTACLE}\n        classModifier=\"quarter\"\n        isDisabled={!monster}\n        data={adventureData?.obstacle}\n      />\n      <FormAutocomplete\n        type={TYPES.MONSTER_ATTACK}\n        classModifier=\"quarter\"\n        isDisabled={!monster}\n        data={adventureData?.attack}\n      />\n      <FormInput type={TYPES.MONSTER_SCORE} inputType=\"number\" classModifier=\"quarter\" />\n      <hr />\n      <FormAutocomplete type={TYPES.FAMILIAR} classModifier=\"half\" />\n      <FormInput type={TYPES.FAMILIAR_POWER} inputType=\"number\" classModifier=\"quarter\" />\n      <FormInput type={TYPES.FAMILIAR_NAME} classModifier=\"quarter\" />\n      <FormAutocompleteMulti type={TYPES.FIENDS} classModifier=\"half\" />\n      <FormAutocompleteMulti type={TYPES.FIENDS_BANISHED} classModifier=\"half\" />\n      <hr />\n      <FormInput type={TYPES.XP} inputType=\"number\" classModifier=\"quarter\" />\n      <FormInput type={TYPES.GOLD} inputType=\"number\" classModifier=\"quarter\" />\n      <FormInput type={TYPES.SCORE} inputType=\"number\" classModifier=\"quarter\" />\n      <FormInput type={TYPES.DATE} inputType=\"date\" classModifier=\"quarter\" />\n    </main>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nimport { REFRESH_TIMER } from '../utils/constants';\n\nfunction CircularProgressWithLabel({ value }) {\n  return (\n    <Box position=\"relative\" display=\"inline-flex\">\n      <CircularProgress variant=\"static\" value={value} />\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n          value\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nexport default function Refreshing() {\n  const [progress, setProgress] = useState(1);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((prevProgress) => (prevProgress >= 100 ? 100 : prevProgress + 10));\n    }, REFRESH_TIMER / 10);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <main className=\"form form--refreshing\">\n      <CircularProgressWithLabel value={progress} />\n    </main>\n  );\n}\n","import React, { useCallback, useEffect, forwardRef } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\n\nimport useGlobalState, { getCompleteGlobalState } from '../useGlobalState';\nimport { DIALOGS } from '../utils/constants';\nimport {\n  determineCharacterCompletion,\n  getCharacterJsonApi,\n  getCharacterTextString,\n} from '../utils';\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function CodeDialog() {\n  const [activeDialog, setActiveDialog] = useGlobalState('activeDialog');\n  const [characterObject, setCharacterObject] = useGlobalState('characterObject');\n  const [isCharacterComplete, setIsCharacterComplete] = useGlobalState('isCharacterComplete');\n  const [, setIsCharacterGenerated] = useGlobalState('isCharacterGenerated');\n\n  useEffect(() => {\n    try {\n      const referenceObj = getCompleteGlobalState();\n      setIsCharacterComplete(determineCharacterCompletion(referenceObj));\n      setCharacterObject(getCharacterJsonApi(referenceObj));\n      setIsCharacterGenerated(true);\n    } catch (err) {\n      console.error(err);\n      setIsCharacterGenerated(false);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const handleCloseDialog = () => {\n    setActiveDialog(null);\n  };\n\n  const saveTextFile = useCallback(() => {\n    const referenceObj = getCompleteGlobalState();\n    const a = document.createElement('a');\n    const file = new Blob([getCharacterTextString(referenceObj)], { type: 'text/plain' });\n    a.href = URL.createObjectURL(file);\n    const characterName = referenceObj.characterName?.toLowerCase() ?? 'untitled';\n    a.download = `${characterName}-hero-totem.txt`;\n    a.click();\n  }, []);\n\n  return (\n    <Dialog\n      open={activeDialog === DIALOGS.CODE}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleCloseDialog}\n    >\n      <DialogTitle>Character Sheet JSON</DialogTitle>\n      <DialogContent>\n        <pre>{JSON.stringify(characterObject, null, 4)}</pre>\n      </DialogContent>\n      <DialogActions>\n        {!isCharacterComplete && (\n          <span className=\"dialog-alert\">This character sheet is incomplete</span>\n        )}\n        <Button onClick={saveTextFile} color=\"primary\" disabled={!isCharacterComplete}>\n          <CloudDownloadIcon /> Download\n        </Button>\n        <Button onClick={handleCloseDialog} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/functions';\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst fb = firebase.initializeApp(config);\n\nexport const API_FUNCTIONS = fb.functions();\n\nexport default fb.database();\n","import React, { forwardRef, useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\nimport Slide from '@material-ui/core/Slide';\n\nimport { getHashData } from '../database';\nimport { API_FUNCTIONS } from '../firebase';\nimport useGlobalState, { setCompleteGlobalState, initialState } from '../useGlobalState';\nimport { loadCharacterFromDatabase } from '../utils';\nimport { DIALOGS, TYPES, SCREENS, REFRESH_TIMER } from '../utils/constants';\n\nconst API = {\n  getCharacters: API_FUNCTIONS.httpsCallable('getRollPlayerCharacters'),\n};\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function ImportDialog() {\n  // Global States\n  const [activeDialog, setActiveDialog] = useGlobalState('activeDialog');\n  const [, setScreen] = useGlobalState('screen');\n  // Local states\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedCharacterId, setSelectedCharacterId] = useState(null);\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(() => {\n    async function getCharacters() {\n      try {\n        setIsLoading(true);\n        const response = await API.getCharacters();\n        setCharacters(response.data);\n      } catch (err) {\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getCharacters();\n  }, []);\n\n  const handleCloseDialog = () => {\n    setActiveDialog(null);\n  };\n\n  const handleLoadCharacter = () => {\n    setActiveDialog(null);\n    setScreen(SCREENS.REFRESH);\n\n    setTimeout(() => {\n      setCompleteGlobalState(\n        loadCharacterFromDatabase(characters, selectedCharacterId, initialState)\n      );\n      setScreen(SCREENS.FORM);\n    }, REFRESH_TIMER);\n  };\n\n  const handleSelectCharacter = (event) => {\n    setSelectedCharacterId(event.target.id);\n  };\n\n  return (\n    <Dialog\n      open={activeDialog === DIALOGS.IMPORT}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleCloseDialog}\n    >\n      <DialogTitle>Load Character</DialogTitle>\n      <DialogContent>\n        {isLoading ? (\n          <div className=\"import-list__loading\">\n            <CircularProgress />\n          </div>\n        ) : (\n          <ul className=\"import-list\">\n            {characters.map((character) => {\n              const selectedClass =\n                character.id === selectedCharacterId ? 'import-list__character--active' : '';\n              return (\n                <li key={character.id} className={`import-list__character ${selectedClass}`}>\n                  <button onClick={handleSelectCharacter} id={character.id}>\n                    <b>{character.name}</b>, a{' '}\n                    {getHashData(TYPES.RACE)[character.race].name ?? 'character'} created by{' '}\n                    {character.player}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCloseDialog} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button\n          onClick={handleLoadCharacter}\n          color=\"primary\"\n          disabled={isLoading || !Boolean(selectedCharacterId)}\n        >\n          <OpenInBrowserIcon /> Load Character\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { forwardRef, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport PrintIcon from '@material-ui/icons/Print';\n\nimport useGlobalState, { getCompleteGlobalState } from '../useGlobalState';\nimport { DIALOGS } from '../utils/constants';\n\nimport { determineCharacterCompletion, getCharacterJsonApi } from '../utils';\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function PrintDialog() {\n  const [activeDialog, setActiveDialog] = useGlobalState('activeDialog');\n  const [characterObject, setCharacterObject] = useGlobalState('characterObject');\n  const [, setIsCharacterComplete] = useGlobalState('isCharacterComplete');\n  const [, setIsCharacterGenerated] = useGlobalState('isCharacterGenerated');\n\n  useEffect(() => {\n    try {\n      const referenceObj = getCompleteGlobalState();\n      setIsCharacterComplete(determineCharacterCompletion(referenceObj));\n      setCharacterObject(getCharacterJsonApi(referenceObj));\n      setIsCharacterGenerated(true);\n    } catch (err) {\n      console.error(err);\n      setIsCharacterGenerated(false);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const handleCloseDialog = () => {\n    setActiveDialog(null);\n  };\n\n  const handlePrint = () => {\n    window.localStorage.setItem('roll-player-sheet', JSON.stringify(characterObject));\n    setActiveDialog(null);\n  };\n\n  return (\n    <Dialog\n      open={activeDialog === DIALOGS.PRINT}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleCloseDialog}\n    >\n      <DialogTitle>Print Character</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          You may print the character sheet for Roll Player or for Roll Player Adventures\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCloseDialog} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handlePrint} color=\"primary\" disabled>\n          <PrintIcon /> Print RPA\n        </Button>\n        <Button onClick={handlePrint} color=\"primary\" disabled>\n          <PrintIcon /> Print RP\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { forwardRef, useState, useEffect, useCallback } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport SaveIcon from '@material-ui/icons/Save';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\n\nimport { API_FUNCTIONS } from '../firebase';\n\nimport useGlobalState, { getCompleteGlobalState } from '../useGlobalState';\nimport { DIALOGS } from '../utils/constants';\nimport { determineCharacterCompletion, deserializeCharacter } from '../utils';\n\nconst API = {\n  saveCharacter: API_FUNCTIONS.httpsCallable('postRollPlayerCharacter'),\n  updateCharacter: API_FUNCTIONS.httpsCallable('putRollPlayerCharacter'),\n};\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function SaveDialog() {\n  const [activeDialog, setActiveDialog] = useGlobalState('activeDialog');\n  const [characterId, setCharacterId] = useGlobalState('characterId');\n  const [deserializedCharacter, setDeserializedCharacter] = useGlobalState('deserializedCharacter');\n  const [isCharacterComplete, setIsCharacterComplete] = useGlobalState('isCharacterComplete');\n  const [, setIsCharacterGenerated] = useGlobalState('isCharacterGenerated');\n  const [, setToaster] = useGlobalState('toaster');\n  // Local States\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [pw, setPW] = useState(null);\n  const [email, setEmail] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    try {\n      const referenceObj = getCompleteGlobalState();\n      setIsCharacterComplete(determineCharacterCompletion(referenceObj));\n      setDeserializedCharacter(deserializeCharacter(referenceObj));\n      setIsCharacterGenerated(true);\n    } catch (err) {\n      setIsCharacterGenerated(false);\n      console.error(err);\n      setToaster({ severity: 'error', message: 'Failed to get character' });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (pw && email) {\n      setIsLoggedIn(true);\n    }\n  }, [pw, email, setIsLoggedIn]);\n\n  const handleCloseDialog = () => {\n    setActiveDialog(null);\n  };\n\n  const handleSave = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      if (isCharacterComplete) {\n        let response;\n        if (characterId) {\n          response = await API.updateCharacter({\n            id: characterId,\n            ...deserializedCharacter,\n          });\n        } else {\n          response = await API.saveCharacter(deserializedCharacter);\n        }\n\n        setCharacterId(response.id);\n        setActiveDialog(null);\n      } else {\n        throw Error('Character is not complete');\n      }\n      setToaster({ severity: 'success', message: 'Failed to save character' });\n    } catch (err) {\n      console.error(err);\n      setToaster({ severity: 'error', message: `Failed to save character: ${err}` });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [\n    characterId,\n    deserializedCharacter,\n    isCharacterComplete,\n    setActiveDialog,\n    setCharacterId,\n    setToaster,\n  ]);\n\n  return (\n    <Dialog\n      open={activeDialog === DIALOGS.SAVE}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleCloseDialog}\n      className=\"\"\n    >\n      <DialogTitle>Save Character</DialogTitle>\n      <DialogContent>\n        {isLoading && (\n          <div className=\"import-list__loading\">\n            <CircularProgress />\n          </div>\n        )}\n        {!isLoggedIn && (\n          <FormControl className=\"save-login-form\">\n            <h3>Login</h3>\n            <TextField\n              id=\"email\"\n              label=\"E-mail\"\n              onChange={(e) => setEmail(e.target.value)}\n              type=\"email\"\n            />\n            <TextField\n              id=\"password\"\n              label=\"Password\"\n              onChange={(e) => setPW(e.target.value)}\n              type=\"password\"\n            />\n            <Button onClick={handleCloseDialog} variant=\"contained\" color=\"primary\">\n              Login\n            </Button>\n          </FormControl>\n        )}\n      </DialogContent>\n      <DialogActions>\n        {!isCharacterComplete && (\n          <span className=\"dialog-alert\">This character sheet is incomplete</span>\n        )}\n        <Button onClick={handleCloseDialog} color=\"secondary\" disabled={isLoading}>\n          Close\n        </Button>\n        <Button\n          onClick={handleSave}\n          color=\"primary\"\n          disabled={!isLoggedIn || !isCharacterComplete || isLoading}\n        >\n          <SaveIcon /> {characterId ? 'Update' : 'Save'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\n\nimport Header from './Header';\nimport Toaster from './Toaster';\n\nimport Form from './Form';\nimport Refreshing from './Refreshing';\n\nimport CodeDialog from './CodeDialog';\nimport ImportDialog from './ImportDialog';\nimport PrintDialog from './PrintDialog';\nimport SaveDialog from './SaveDialog';\n\nimport { DIALOGS, SCREENS } from '../utils/constants';\nimport useGlobalState from '../useGlobalState';\n\nconst activeComponent = {\n  [SCREENS.FORM]: <Form />,\n  [SCREENS.REFRESH]: <Refreshing />,\n};\n\nconst activeDialogComponent = {\n  [DIALOGS.CODE]: <CodeDialog />,\n  [DIALOGS.IMPORT]: <ImportDialog />,\n  [DIALOGS.PRINT]: <PrintDialog />,\n  [DIALOGS.SAVE]: <SaveDialog />,\n};\n\nexport default function App() {\n  const [screen] = useGlobalState('screen');\n  const [activeDialog] = useGlobalState('activeDialog');\n\n  return (\n    <Container maxWidth=\"lg\" className=\"app-container\">\n      <Header />\n      {activeComponent[screen]}\n      {activeDialogComponent[activeDialog]}\n      <Toaster />\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './stylesheets/index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}