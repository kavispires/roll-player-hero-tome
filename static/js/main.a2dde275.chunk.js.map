{"version":3,"sources":["serviceWorker.js","utils/constants.js","database/index.js","utils/randomizer.js","utils/index.js","useGlobalState.js","components/Header.jsx","components/Toaster.jsx","components/FormInput.jsx","components/FormAutocomplete.jsx","components/FormAutocompleteMulti.jsx","components/FormAttributes.jsx","components/FormAlignment.jsx","components/FormCheckbox.jsx","components/Form.jsx","components/Refreshing.jsx","components/CodeDialog.jsx","firebase/index.js","components/ImportDialog.jsx","components/PrintDialog.jsx","components/SaveDialog.jsx","components/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","SCREENS","FORM","Symbol","PRINT","REFRESH","DIALOGS","CODE","IMPORT","SAVE","ATTRIBUTES","str","dex","con","int","wis","cha","TYPES","ALIGNMENT","ALIGNMENT_POSITION","BACKSTORY","CHARACTER_NAME","CLASS","DATE","FAMILIAR","FAMILIAR_NAME","FAMILIAR_POWER","FIENDS","FIENDS_BANISHED","GENDER","GOLD","MARKET_ARMOR","MARKET_WEAPON","MARKET_SKILL","MARKET_SCROLL","MARKET_TRAIT","MINION","MONSTER","MONSTER_ATTACK","MONSTER_LOCATION","MONSTER_OBSTACLE","MONSTER_SCORE","MONSTER_LENTICULAR","PLAYER","RACE","SCORE","XP","GLOBAL_STATE_ALIAS","FORM_LABELS","typeaheadCache","marketCahce","adventureCache","switcher","ALIGNMENTS","BACKSTORIES","CLASSES","FAMILIARS","GENDERS","filterDataByKind","MARKET","MINIONS","ADVENTURE","RACES","getTypeahead","type","undefined","data","typeheadData","Object","values","map","entry","value","id","text","name","sortedTypeaheadData","orderBy","getAdventureTypeahead","monsterName","reduce","acc","monster","push","getHashData","kind","cache","forEach","card","sessionUsedChache","sessionResetThreshold","length","randomizeCharacter","initialState","result","gender","getRandomValueFromList","firstName","NAMES","lastName","prefix","FAMILY_NAMES","suffix","separator","familyName","charAt","toUpperCase","slice","getLastName","characterName","race","getRandomUniqueEntryFromList","class","color","getClassColor","backstory","alignment","alignmentPos","itemsQuantity","left","Array","fill","i","list","sort","Math","random","generateItemsQuantities","weapons","getUniqueValuesFromList","armor","skills","traits","scrolls","minions","getRandomNumber","classId","keys","allowed","tries","getAppropriateMonster","isLenticularVersion","adventureCards","obstacle","attack","getAppropriateAdventureCards","monsterLocation","monsterObstacle","monsterAttack","monsterScore","familiar","familiarName","FAMILIAR_NAMES","familiarPower","min","max","numberOfOptions","options","generateFamiliarPower","fiends","fiendsBanished","xp","gold","score","attributes","raceId","characterClass","characterRace","getAttribute","getAttributes","floor","quantity","ceil","baseGoal","modifier","base","Number","substring","goal","male","female","removeFalsy","item","determineCharacterCompletion","tome","player","some","attr","getCharacterJsonApi","character","getAttributeScores","getRPAAttributeScores","getAlignmentScore","items","filter","battle","species","power","active","banished","counts","experience","health","getHealth","meta","date","Date","getCharacterTextString","getLine","join","addSection","title","sLine","addSubSection","ssLine","addText","addListItem","addList","titleLine","addTitle","attributesObj","rpAttributes","rpaAttributes","addDice","getCombinedAttributeScores","addLine","alignmentObj","allFiends","num","addLineBreak","getMonsterAdventureData","dict","typeahead","raceData","getAttrValue","val","alignmentId","position","aligmentData","split","titles","0","1","2","3","4","5","6","7","8","fiendsCount","getTodaysDate","now","day","getDate","month","getMonth","year","getFullYear","getEntryById","o","activeDialog","screen","toaster","characterObject","deserializedCharacter","isCharacterGenerated","isCharacterComplete","isSavingEnabled","characterId","createGlobalState","useGlobalState","setGlobalStateCGS","setGlobalState","setState","resetGlobalState","setTimeout","getCompleteGlobalState","getState","setCompleteGlobalState","Header","setActiveDialog","setIsSavingEnabled","setScreen","useState","saveClickCount","setSaveClickCount","iconColor","className","IconButton","aria-label","onClick","style","v","Toaster","setToater","isActive","setIsActive","useEffect","closeToaster","Snackbar","open","autoHideDuration","onClose","Alert","severity","elevation","variant","message","FormInput","inputType","classModifier","setEntry","FormControl","TextField","label","onChange","event","target","defaultValue","FormAutocomplete","isDisabled","entryDict","entryTypeahead","Autocomplete","getOptionLabel","option","getOptionSelected","renderInput","params","onInputChange","index","_","selectedEntry","disabled","autoHighlight","FormAutocompleteMulti","ids","multiple","includes","filterSelectedOptions","newInput","FormAttributes","entries","key","Attribute","setAttributes","total","s","readOnly","FormAlignment","setAlignment","setAlignmentPos","alignmentDict","alignmentTypeahead","handleChangeAlignmentPos","alignmentGridPlaceholder","alignmentModifiers","activeModifiers","activeClass","FormCheckbox","FormControlLabel","control","Checkbox","checked","Form","setColor","adventureData","setAdventureData","CircularProgressWithLabel","Box","display","CircularProgress","top","bottom","right","alignItems","justifyContent","Typography","component","round","Refreshing","progress","setProgress","timer","setInterval","prevProgress","REFRESH_TIMER","clearInterval","Transition","forwardRef","props","ref","Slide","direction","CodeDialog","setCharacterObject","setIsCharacterComplete","setIsCharacterGenerated","referenceObj","err","console","error","handleCloseDialog","saveTextFile","useCallback","a","document","createElement","file","Blob","href","URL","createObjectURL","toLowerCase","download","click","Dialog","TransitionComponent","keepMounted","DialogTitle","DialogContent","JSON","stringify","DialogActions","Button","fb","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","API_FUNCTIONS","functions","API","database","getCharacters","httpsCallable","ImportDialog","isLoading","setIsLoading","selectedCharacterId","setSelectedCharacterId","characters","setCharacters","response","handleSelectCharacter","selectedClass","c","state","alternativeLenticularVersion","isArray","loadCharacterFromDatabase","PrintDialog","handlePrint","localStorage","setItem","DialogContentText","saveCharacter","updateCharacter","SaveDialog","setCharacterId","setDeserializedCharacter","setToaster","isLoggedIn","setIsLoggedIn","pw","setPW","email","setEmail","deserializeCharacter","handleSave","Error","e","activeComponent","activeDialogComponent","App","Container","maxWidth","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"8OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6KClBOC,EAAU,CACrBC,KAAMC,OAAO,QACbC,MAAOD,OAAO,SACdE,QAASF,OAAO,YAGLG,EAAU,CACrBC,KAAMJ,OAAO,QACbC,MAAOD,OAAO,SACdK,OAAQL,OAAO,UACfM,KAAMN,OAAO,SAWFO,EAAa,CACxBC,IAAK,WACLC,IAAK,YACLC,IAAK,eACLC,IAAK,eACLC,IAAK,SACLC,IAAK,YAGMC,EAAQ,CACnBC,UAAWf,OAAO,aAClBgB,mBAAoBhB,OAAO,sBAC3BO,WAAYP,OAAO,cACnBiB,UAAWjB,OAAO,aAClBkB,eAAgBlB,OAAO,kBACvBmB,MAAOnB,OAAO,SACdoB,KAAMpB,OAAO,QACbqB,SAAUrB,OAAO,YACjBsB,cAAetB,OAAO,iBACtBuB,eAAgBvB,OAAO,kBACvBwB,OAAQxB,OAAO,UACfyB,gBAAiBzB,OAAO,mBACxB0B,OAAQ1B,OAAO,UACf2B,KAAM3B,OAAO,QACb4B,aAAc5B,OAAO,gBACrB6B,cAAe7B,OAAO,iBACtB8B,aAAc9B,OAAO,gBACrB+B,cAAe/B,OAAO,iBACtBgC,aAAchC,OAAO,gBACrBiC,OAAQjC,OAAO,UACfkC,QAASlC,OAAO,WAChBmC,eAAgBnC,OAAO,kBACvBoC,iBAAkBpC,OAAO,oBACzBqC,iBAAkBrC,OAAO,oBACzBsC,cAAetC,OAAO,iBACtBuC,mBAAoBvC,OAAO,sBAC3BwC,OAAQxC,OAAO,UACfyC,KAAMzC,OAAO,QACb0C,MAAO1C,OAAO,SACd2C,GAAI3C,OAAO,OAGA4C,GAAkB,mBAC5B9B,EAAMC,UAAY,aADU,cAE5BD,EAAME,mBAAqB,gBAFC,cAG5BF,EAAMP,WAAa,cAHS,cAI5BO,EAAM6B,GAAK,MAJiB,cAK5B7B,EAAM2B,KAAO,QALe,cAM5B3B,EAAMK,MAAQ,SANc,cAO5BL,EAAMI,eAAiB,iBAPK,cAQ5BJ,EAAMM,KAAO,QARe,cAS5BN,EAAMO,SAAW,YATW,cAU5BP,EAAMQ,cAAgB,gBAVM,cAW5BR,EAAMS,eAAiB,iBAXK,cAY5BT,EAAMU,OAAS,UAZa,cAa5BV,EAAMW,gBAAkB,kBAbI,cAc5BX,EAAMY,OAAS,UAda,cAe5BZ,EAAMa,KAAO,QAfe,cAgB5Bb,EAAMG,UAAY,aAhBU,cAiB5BH,EAAMc,aAAe,SAjBO,cAkB5Bd,EAAMe,cAAgB,WAlBM,cAmB5Bf,EAAMgB,aAAe,UAnBO,cAoB5BhB,EAAMiB,cAAgB,WApBM,cAqB5BjB,EAAMkB,aAAe,UArBO,cAsB5BlB,EAAMmB,OAAS,WAtBa,cAuB5BnB,EAAMoB,QAAU,WAvBY,cAwB5BpB,EAAMqB,eAAiB,iBAxBK,cAyB5BrB,EAAMsB,iBAAmB,mBAzBG,cA0B5BtB,EAAMuB,iBAAmB,mBA1BG,cA2B5BvB,EAAMwB,cAAgB,gBA3BM,cA4B5BxB,EAAMyB,mBAAqB,uBA5BC,cA6B5BzB,EAAM0B,OAAS,UA7Ba,cA8B5B1B,EAAM4B,MAAQ,SA9Bc,cA+B5B5B,EAAM6B,GAAK,MA/BiB,GAkClBE,GAAW,mBACrB/B,EAAM2B,KAAO,QADQ,cAErB3B,EAAMK,MAAQ,SAFO,cAGrBL,EAAMI,eAAiB,kBAHF,cAIrBJ,EAAMM,KAAO,QAJQ,cAKrBN,EAAMO,SAAW,YALI,cAMrBP,EAAMQ,cAAgB,iBAND,cAOrBR,EAAMS,eAAiB,SAPF,cAQrBT,EAAMU,OAAS,UARM,cASrBV,EAAMW,gBAAkB,mBATH,cAUrBX,EAAMY,OAAS,UAVM,cAWrBZ,EAAMa,KAAO,QAXQ,cAYrBb,EAAMG,UAAY,aAZG,cAarBH,EAAMc,aAAe,SAbA,cAcrBd,EAAMe,cAAgB,WAdD,cAerBf,EAAMgB,aAAe,UAfA,cAgBrBhB,EAAMiB,cAAgB,WAhBD,cAiBrBjB,EAAMkB,aAAe,UAjBA,cAkBrBlB,EAAMmB,OAAS,sBAlBM,cAmBrBnB,EAAMoB,QAAU,WAnBK,cAoBrBpB,EAAMqB,eAAiB,UApBF,cAqBrBrB,EAAMsB,iBAAmB,YArBJ,cAsBrBtB,EAAMuB,iBAAmB,YAtBJ,cAuBrBvB,EAAMwB,cAAgB,iBAvBD,cAwBrBxB,EAAMyB,mBAAqB,sBAxBN,cAyBrBzB,EAAM0B,OAAS,UAzBM,cA0BrB1B,EAAM4B,MAAQ,eA1BO,cA2BrB5B,EAAM6B,GAAK,MA3BU,G,iGC/ElBG,EAAiB,GACjBC,EAAc,GACdC,EAAiB,GAEjBC,GAAQ,mBACXnC,EAAMC,UAAYmC,GADP,cAEXpC,EAAMG,UAAYkC,GAFP,cAGXrC,EAAMK,MAAQiC,GAHH,cAIXtC,EAAMO,SAAWgC,GAJN,cAKXvC,EAAMU,OAASA,GALJ,cAMXV,EAAMW,gBAAkBD,GANb,cAOXV,EAAMY,OAAS4B,GAPJ,cAQXxC,EAAMc,aAAe2B,GAAiB,QAASC,EAAQT,IAR5C,cASXjC,EAAMiB,cAAgBwB,GAAiB,SAAUC,EAAQT,IAT9C,cAUXjC,EAAMgB,aAAeyB,GAAiB,QAASC,EAAQT,IAV5C,cAWXjC,EAAMkB,aAAeuB,GAAiB,QAASC,EAAQT,IAX5C,cAYXjC,EAAMe,cAAgB0B,GAAiB,SAAUC,EAAQT,IAZ9C,cAaXjC,EAAMmB,OAASwB,GAbJ,cAcX3C,EAAMoB,QAAUA,GAdL,cAeXpB,EAAMsB,iBAAmBmB,GAAiB,WAAYG,EAAWV,IAftD,cAgBXlC,EAAMuB,iBAAmBkB,GAAiB,WAAYG,EAAWV,IAhBtD,cAiBXlC,EAAMqB,eAAiBoB,GAAiB,SAAUG,EAAWV,IAjBlD,cAkBXlC,EAAM2B,KAAOkB,GAlBF,GAqBP,SAASC,EAAaC,GAC3B,QAA6BC,IAAzBhB,EAAee,GAAqB,CACtC,IAAME,EAAOd,EAASY,GAEhBG,EAAeC,OAAOC,OAAOH,GAAMI,KAAI,SAACC,GAAD,MAAY,CACvDC,MAAOD,EAAME,GACbC,KAAMH,EAAMI,SAGRC,EAAsBC,YAAQV,EAAc,QAElDlB,EAAee,GAAQY,EAGzB,OAAO3B,EAAee,GAGjB,SAASc,EAAsBZ,EAAMa,GAC1C,OAAOX,OAAOC,OAAOH,GAAMc,QAAO,SAACC,EAAKV,GAOtC,OANIA,EAAMW,UAAYH,GACpBE,EAAIE,KAAK,CACPX,MAAOD,EAAME,GACbC,KAAMH,EAAMI,OAGTM,IACN,IAGE,SAASG,EAAYpB,GAC1B,OAAOZ,EAASY,GAGlB,SAASN,GAAiB2B,EAAMnB,EAAMoB,GAWpC,YAVoBrB,IAAhBqB,EAAMD,IACRjB,OAAOC,OAAOH,GAAMqB,SAAQ,SAACC,QACFvB,IAArBqB,EAAME,EAAKH,QACbC,EAAME,EAAKH,MAAQ,IAGrBC,EAAME,EAAKH,MAAMG,EAAKf,IAAMe,KAIzBF,EAAMD,GCnFf,IAAMI,GAAoB,GACpBC,IAAqB,mBACxBzE,EAAM2B,KAAOmB,EAAa9C,EAAM2B,MAAM+C,QADd,cAExB1E,EAAMK,MAAQyC,EAAa9C,EAAMK,OAAOqE,QAFhB,cAGxB1E,EAAMC,UAAY6C,EAAa9C,EAAMC,WAAWyE,QAHxB,cAIxB1E,EAAMO,SAAWuC,EAAa9C,EAAMO,UAAUmE,QAJtB,cAKxB1E,EAAMU,OAASoC,EAAa9C,EAAMU,QAAQgE,QALlB,cAMxB1E,EAAMG,UAAY2C,EAAa9C,EAAMG,WAAWuE,QANxB,cAOxB1E,EAAMc,aAAegC,EAAa9C,EAAMc,cAAc4D,QAP9B,cAQxB1E,EAAMe,cAAgB+B,EAAa9C,EAAMe,eAAe2D,QARhC,cASxB1E,EAAMgB,aAAe8B,EAAa9C,EAAMgB,cAAc0D,QAT9B,cAUxB1E,EAAMiB,cAAgB6B,EAAa9C,EAAMiB,eAAeyD,QAVhC,cAWxB1E,EAAMkB,aAAe4B,EAAa9C,EAAMkB,cAAcwD,QAX9B,cAYxB1E,EAAMmB,OAAS2B,EAAa9C,EAAMmB,QAAQuD,QAZlB,cAaxB1E,EAAMoB,QAAU0B,EAAa9C,EAAMoB,SAASsD,QAbpB,GAgBpB,SAASC,GAAmBC,GACjC,IAAMC,EAAM,eAAQD,GAEpBC,EAAOC,OAASC,GAAuB,CAAC,OAAQ,WAEhD,IAAMC,EAAYD,GAAuBE,GAAMJ,EAAOC,SAChDI,EAyNR,WACE,IAAMC,EAASJ,GAAuBK,GAAaD,QAC7CE,EAASN,GAAuBK,GAAaC,QAC7CC,EAAYH,IAAWE,EAAS,IAAM,GACtCE,EAAU,UAAMJ,GAAN,OAAeG,GAAf,OAA2BD,GAC3C,OAAOE,EAAWC,OAAO,GAAGC,cAAgBF,EAAWG,MAAM,GA9N5CC,GACjBd,EAAOe,cAAP,UAA0BZ,GAA1B,OAAsCE,EAAQ,WAAOA,GAAa,IAElEL,EAAOgB,KAAOC,GAA6B9F,EAAM2B,MAAM6B,GAEvDqB,EAAOkB,MAAQD,GAA6B9F,EAAMK,OAAOmD,GAEzDqB,EAAOmB,MAAQC,GAAcpB,EAAOkB,OAEpClB,EAAOqB,UAAYJ,GAA6B9F,EAAMG,WAAWqD,GAEjEqB,EAAOsB,UAAYL,GAA6B9F,EAAMC,WAAWuD,GACjEqB,EAAOuB,aAAerB,GAAuB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEtE,IAAMsB,EAoER,WACE,IAAIC,EAAO,EACLzB,EAAS,IAAI0B,MAAM,GAAGC,KAAK,GAAGnD,KAAI,SAACoD,GACvC,GAAIH,EAAO,EAAG,CACZ,IAAI/C,EAAQwB,GAAuB,CAAC,EAAG,EAAG,EAAG,EAAG,IAGhD,OAFIxB,EAAQ+C,IAAM/C,EAAQ+C,GAC1BA,GAAQ/C,EACDA,EAET,OAAOkD,KAGLH,EAAO,GACTzB,EAAOP,SAAQ,SAACmC,GACVH,EAAO,GAAKG,EAAI,IAClBH,GAAQ,EACRG,GAAK,MAKX,OASmBC,EATA7B,EAUZ6B,EAAKC,MAAK,kBAAMC,KAAKC,SAAW,MADzC,IAAqBH,EAlGGI,GACtBjC,EAAOkC,QAAUC,GAAwBhH,EAAMe,cAAesF,EAAc,IAC5ExB,EAAOoC,MAAQD,GAAwBhH,EAAMc,aAAcuF,EAAc,IACzExB,EAAOqC,OAASF,GAAwBhH,EAAMgB,aAAcqF,EAAc,IAC1ExB,EAAOsC,OAASH,GAAwBhH,EAAMkB,aAAcmF,EAAc,IAC1ExB,EAAOuC,QAAUJ,GAAwBhH,EAAMiB,cAAeoF,EAAc,IAE5ExB,EAAOwC,QAAUL,GAAwBhH,EAAMmB,OAAQmG,GAAgB,EAAG,IAE1E,IAAMrD,EAsGR,SAA+BsD,GAAU,IAAD,EAelC1C,OAbqC7B,IAArCwB,GAAkBxE,EAAMoB,WAC1BoD,GAAkBxE,EAAMoB,SAAW,IAKnC+B,OAAOqE,KAAP,iBAAYhD,SAAZ,IAAYA,QAAZ,EAAYA,GAAoBxE,EAAMoB,gBAAtC,QAAkD,IAAIsD,SACtDD,GAAsBzE,EAAMoB,WAE5BoD,GAAkBxE,EAAMoB,SAAW,IAKrC,IAAIqG,GAAU,EACVC,EAAQ,EACZ,EAAG,CAAC,IAAD,EACDD,GAAU,GACV5C,EAASE,GAAuBjC,EAAa9C,EAAMoB,WACxC4E,QAAU7B,EAAYnE,EAAMK,OAAOkH,KAC5CE,GAAU,KAGVC,aAEqD1E,KAAtC,OAAjBwB,SAAiB,IAAjBA,IAAA,UAAAA,GAAoBxE,EAAMoB,gBAA1B,eAAqCyD,EAAOtB,UAC3CkE,GACDC,EAAQ,IAMV,OAFAlD,GAAkBxE,EAAMoB,SAASyD,EAAOtB,QAAS,EAE1CY,EAAYnE,EAAMoB,SAASyD,EAAOtB,OAzIzBoE,CAAsB9C,EAAOkB,OAC7ClB,EAAOZ,QAAUA,EAAQT,GACzBqB,EAAO+C,oBAAsB7C,GAAuB,EAAC,GAAM,IAC3D,IAAM8C,EAyIR,SAAsC5D,GACpC,MAAO,CACLpF,SAAUkG,GACRlB,EAAsBM,EAAYnE,EAAMsB,kBAAmB2C,EAAQP,OACnEH,MACFuE,SAAU/C,GACRlB,EAAsBM,EAAYnE,EAAMuB,kBAAmB0C,EAAQP,OACnEH,MACFwE,OAAQhD,GACNlB,EAAsBM,EAAYnE,EAAMqB,gBAAiB4C,EAAQP,OACjEH,OAnJmByE,CAA6B/D,GACpDY,EAAOoD,gBAAkBJ,EAAehJ,SACxCgG,EAAOqD,gBAAkBL,EAAeC,SACxCjD,EAAOsD,cAAgBN,EAAeE,OACtClD,EAAOuD,aAAed,GAAgB,GAAI,IAE1C,IAAMe,EAAWvC,GAA6B9F,EAAMO,UAcpD,OAbAsE,EAAOwD,SAAWA,EAAS7E,GAC3BqB,EAAOyD,aAAevD,GAAuBwD,IAC7C1D,EAAO2D,cAiFT,SAA+BC,EAAKC,GAGlC,IAFA,IAAMC,EAAkBD,EAAMD,EAAMnB,GAAgB,EAAG,GACjDsB,EAAU,CAACH,EAAKC,GACbjC,GAAK,EAAGA,EAAIkC,EAAiBlC,IACpCmC,EAAQ1E,KAAKuE,EAAMhC,GAErB,OAAO1B,GAAuB6D,GAvFPC,CAAsBR,EAAS,aAAcA,EAAS,cAE7ExD,EAAOiE,OAAS9B,GAAwBhH,EAAMU,OAAQ4G,GAAgB,EAAG,IACzEzC,EAAOkE,eAAiB/B,GAAwBhH,EAAMU,OAAQ4G,GAAgB,EAAG,IAEjFzC,EAAOmE,GAAK1B,GAAgB,EAAG,GAC/BzC,EAAOoE,KAAO3B,GAAgB,EAAG,IACjCzC,EAAOqE,MAAQ5B,GAAgB,GAAI,IAEnCzC,EAAOsE,WAqIT,SAAuB5B,EAAS6B,GAC9B,IAAMC,EAAiBlF,EAAYnE,EAAMK,OAAOkH,GAC1C+B,EAAgBnF,EAAYnE,EAAM2B,MAAMyH,GAExCvE,EAAS,CACb0E,GAAaF,EAAe3J,IAAK4J,EAAc5J,KAC/C6J,GAAaF,EAAe1J,IAAK2J,EAAc3J,KAC/C4J,GAAaF,EAAezJ,IAAK0J,EAAc1J,KAC/C2J,GAAaF,EAAexJ,IAAKyJ,EAAczJ,KAC/C0J,GAAaF,EAAevJ,IAAKwJ,EAAcxJ,KAC/CyJ,GAAaF,EAAetJ,IAAKuJ,EAAcvJ,MAGjD,MAAO,CACLL,IAAKmF,EAAO,GACZlF,IAAKkF,EAAO,GACZjF,IAAKiF,EAAO,GACZhF,IAAKgF,EAAO,GACZ/E,IAAK+E,EAAO,GACZ9E,IAAK8E,EAAO,IAxJM2E,CAAc3E,EAAOkB,MAAOlB,EAAOgB,MAEhDhB,EAGT,SAASE,GAAuB2B,GAC9B,OAAOA,EAAKE,KAAK6C,MAAM7C,KAAKC,SAAWH,EAAKhC,SAG9C,SAASoB,GAA6B/C,GAAO,IAAD,EAatC8B,EAZA6C,EAAQ,OAEoB1E,IAA5BwB,GAAkBzB,KACpByB,GAAkBzB,GAAQ,IAIxBI,OAAOqE,KAAP,iBAAYhD,SAAZ,IAAYA,QAAZ,EAAYA,GAAoBzB,UAAhC,QAAyC,IAAI2B,SAAWD,GAAsB1B,KAChFyB,GAAkBzB,GAAQ,IAK5B,EAAG,CAAC,IAAD,EACD8B,EAASE,GAAuBjC,EAAaC,MAC3C2E,aACmD1E,KAA7B,OAAjBwB,SAAiB,IAAjBA,IAAA,UAAAA,GAAoBzB,UAApB,eAA4B8B,EAAOtB,SAAwBmE,EAAQ,IAK5E,OAFAlD,GAAkBzB,GAAM8B,EAAOtB,QAAS,EAEjCY,EAAYpB,GAAM8B,EAAOtB,OAGlC,SAASyD,GAAwBjE,EAAM2G,GACrC,OAAO,IAAInD,MAAMmD,GAAUlD,KAAK,MAAMnD,KAAI,kBAAMyC,GAA6B/C,GAAMS,MA2BrF,SAAS8D,KAAmC,IAAnBmB,EAAkB,uDAAZ,EAAGC,EAAS,uDAAH,EAGtC,OAFAD,EAAM7B,KAAK+C,KAAKlB,GAChBC,EAAM9B,KAAK6C,MAAMf,GACV9B,KAAK6C,MAAM7C,KAAKC,UAAY6B,EAAMD,EAAM,IAAMA,EA2FvD,SAASc,GAAaK,EAAUC,GAC9B,IAAMC,EAAOC,OAAO,UAAGH,GAAWI,UAAU,EAAG,IAEzCC,EAAOH,EAAOD,EAWpB,OAAOC,GARHG,EAAO,GACG3C,IAAiB,EAAG,GACvB2C,GAAQ,IAAML,EAASlF,OAAS,EAC7B4C,IAAiB,EAAG,GAEpBA,IAAiB,EAAG,IAcpC,IAAMrC,GAAQ,CACZiF,KAAM,CACJ,SACA,QACA,SACA,YACA,SACA,MACA,WACA,SACA,OACA,OACA,OACA,QACA,UACA,SACA,SACA,OACA,MACA,OACA,QACA,aACA,UACA,SACA,OACA,QACA,QACA,aACA,SACA,UACA,QAEFC,OAAQ,CACN,OACA,QACA,SACA,OACA,OACA,OACA,QACA,OACA,SACA,SACA,OACA,OACA,QACA,OACA,MACA,OACA,OACA,MACA,QACA,UACA,QACA,OACA,SACA,MACA,OACA,SACA,OACA,OACA,QACA,QAIE/E,GAAe,CACnBD,OAAQ,CACN,UACA,OACA,OACA,QACA,QACA,MACA,OACA,SACA,SACA,OACA,OACA,OACA,IAEFE,OAAQ,CACN,MACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,OACA,MACA,OACA,QACA,SACA,QACA,OACA,KAIEkD,GAAiB,CACrB,QACA,QACA,OACA,MACA,MACA,MACA,QACA,MACA,OACA,QACA,QACA,QACA,OACA,QACA,UACA,QACA,QACA,QACA,SACA,OACA,SACA,ICnXI6B,GAAc,SAACC,GAAD,OAAUA,GAOvB,SAASC,GAA6BC,GAE3C,SAAKA,EAAK3E,gBAAkB2E,EAAKC,aAG5BD,EAAK1E,MAAS0E,EAAKxE,OAAUwE,EAAKrE,WAAcqE,EAAKpE,cAGtDhD,OAAOC,OAAOmH,EAAKpB,YAAYsB,MAAK,SAACC,GAAD,OAAUA,EAAO,SAGrDH,EAAKtG,WAAasG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","file":"static/js/main.a2dde275.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const SCREENS = {\n  FORM: Symbol('FORM'),\n  PRINT: Symbol('PRINT'),\n  REFRESH: Symbol('REFRESH'),\n};\n\nexport const DIALOGS = {\n  CODE: Symbol('CODE'),\n  PRINT: Symbol('PRINT'),\n  IMPORT: Symbol('IMPORT'),\n  SAVE: Symbol('SAVE'),\n};\n\nexport const GENDERS = {\n  FEMALE: 'FEMALE',\n  MALE: 'MALE',\n  UNKNOWN: 'UNKNOWN',\n};\n\nexport const REFRESH_TIMER = 800;\n\nexport const ATTRIBUTES = {\n  str: 'Strength',\n  dex: 'Dexterity',\n  con: 'Constitution',\n  int: 'Intelligence',\n  wis: 'Wisdom',\n  cha: 'Charisma',\n};\n\nexport const TYPES = {\n  ALIGNMENT: Symbol('ALIGNMENT'),\n  ALIGNMENT_POSITION: Symbol('ALIGNMENT_POSITION'),\n  ATTRIBUTES: Symbol('ATTRIBUTES'),\n  BACKSTORY: Symbol('BACKSTORY'),\n  CHARACTER_NAME: Symbol('CHARACTER_NAME'),\n  CLASS: Symbol('CLASS'),\n  DATE: Symbol('DATE'),\n  FAMILIAR: Symbol('FAMILIAR'),\n  FAMILIAR_NAME: Symbol('FAMILIAR_NAME'),\n  FAMILIAR_POWER: Symbol('FAMILIAR_POWER'),\n  FIENDS: Symbol('FIENDS'),\n  FIENDS_BANISHED: Symbol('FIENDS_BANISHED'),\n  GENDER: Symbol('GENDER'),\n  GOLD: Symbol('GOLD'),\n  MARKET_ARMOR: Symbol('MARKET_ARMOR'),\n  MARKET_WEAPON: Symbol('MARKET_WEAPON'),\n  MARKET_SKILL: Symbol('MARKET_SKILL'),\n  MARKET_SCROLL: Symbol('MARKET_SCROLL'),\n  MARKET_TRAIT: Symbol('MARKET_TRAIT'),\n  MINION: Symbol('MINION'),\n  MONSTER: Symbol('MONSTER'),\n  MONSTER_ATTACK: Symbol('MONSTER_ATTACK'),\n  MONSTER_LOCATION: Symbol('MONSTER_LOCATION'),\n  MONSTER_OBSTACLE: Symbol('MONSTER_OBSTACLE'),\n  MONSTER_SCORE: Symbol('MONSTER_SCORE'),\n  MONSTER_LENTICULAR: Symbol('MONSTER_LENTICULAR'),\n  PLAYER: Symbol('PLAYER'),\n  RACE: Symbol('RACE'),\n  SCORE: Symbol('SCORE'),\n  XP: Symbol('XP'),\n};\n\nexport const GLOBAL_STATE_ALIAS = {\n  [TYPES.ALIGNMENT]: 'alignment',\n  [TYPES.ALIGNMENT_POSITION]: 'alignmentPos',\n  [TYPES.ATTRIBUTES]: 'attributes',\n  [TYPES.XP]: 'xp',\n  [TYPES.RACE]: 'race',\n  [TYPES.CLASS]: 'class',\n  [TYPES.CHARACTER_NAME]: 'characterName',\n  [TYPES.DATE]: 'date',\n  [TYPES.FAMILIAR]: 'familiar',\n  [TYPES.FAMILIAR_NAME]: 'familiarName',\n  [TYPES.FAMILIAR_POWER]: 'familiarPower',\n  [TYPES.FIENDS]: 'fiends',\n  [TYPES.FIENDS_BANISHED]: 'fiendsBanished',\n  [TYPES.GENDER]: 'gender',\n  [TYPES.GOLD]: 'gold',\n  [TYPES.BACKSTORY]: 'backstory',\n  [TYPES.MARKET_ARMOR]: 'armor',\n  [TYPES.MARKET_WEAPON]: 'weapons',\n  [TYPES.MARKET_SKILL]: 'skills',\n  [TYPES.MARKET_SCROLL]: 'scrolls',\n  [TYPES.MARKET_TRAIT]: 'traits',\n  [TYPES.MINION]: 'minions',\n  [TYPES.MONSTER]: 'monster',\n  [TYPES.MONSTER_ATTACK]: 'monsterAttack',\n  [TYPES.MONSTER_LOCATION]: 'monsterLocation',\n  [TYPES.MONSTER_OBSTACLE]: 'monsterObstacle',\n  [TYPES.MONSTER_SCORE]: 'monsterScore',\n  [TYPES.MONSTER_LENTICULAR]: 'isLenticularVersion',\n  [TYPES.PLAYER]: 'player',\n  [TYPES.SCORE]: 'score',\n  [TYPES.XP]: 'xp',\n};\n\nexport const FORM_LABELS = {\n  [TYPES.RACE]: 'Race',\n  [TYPES.CLASS]: 'Class',\n  [TYPES.CHARACTER_NAME]: 'Character Name',\n  [TYPES.DATE]: 'Date',\n  [TYPES.FAMILIAR]: 'Familiar',\n  [TYPES.FAMILIAR_NAME]: 'Familiar Name',\n  [TYPES.FAMILIAR_POWER]: 'Power',\n  [TYPES.FIENDS]: 'Fiends',\n  [TYPES.FIENDS_BANISHED]: 'Banished Fiends',\n  [TYPES.GENDER]: 'Gender',\n  [TYPES.GOLD]: 'Gold',\n  [TYPES.BACKSTORY]: 'Backstory',\n  [TYPES.MARKET_ARMOR]: 'Armor',\n  [TYPES.MARKET_WEAPON]: 'Weapons',\n  [TYPES.MARKET_SKILL]: 'Skills',\n  [TYPES.MARKET_SCROLL]: 'Scrolls',\n  [TYPES.MARKET_TRAIT]: 'Traits',\n  [TYPES.MINION]: 'Trophies (Minions)',\n  [TYPES.MONSTER]: 'Monster',\n  [TYPES.MONSTER_ATTACK]: 'Attack',\n  [TYPES.MONSTER_LOCATION]: 'Location',\n  [TYPES.MONSTER_OBSTACLE]: 'Obstacle',\n  [TYPES.MONSTER_SCORE]: 'Monster Score',\n  [TYPES.MONSTER_LENTICULAR]: 'Lenticular Version',\n  [TYPES.PLAYER]: 'Player',\n  [TYPES.SCORE]: 'Final Score',\n  [TYPES.XP]: 'XP',\n};\n","import { orderBy } from 'lodash-es';\n\n// Data\nimport ADVENTURE from './adventure.json';\nimport ALIGNMENTS from './alignments.json';\nimport BACKSTORIES from './backstories.json';\nimport CLASSES from './classes.json';\nimport FAMILIARS from './familiars.json';\nimport FIENDS from './fiends.json';\nimport GENDERS from './genders.json';\nimport MARKET from './market.json';\nimport MINIONS from './minions.json';\nimport MONSTER from './monsters.json';\nimport RACES from './races.json';\n\n// Utils\nimport { TYPES } from '../utils/constants';\n\nconst typeaheadCache = {};\nconst marketCahce = {};\nconst adventureCache = {};\n\nconst switcher = {\n  [TYPES.ALIGNMENT]: ALIGNMENTS,\n  [TYPES.BACKSTORY]: BACKSTORIES,\n  [TYPES.CLASS]: CLASSES,\n  [TYPES.FAMILIAR]: FAMILIARS,\n  [TYPES.FIENDS]: FIENDS,\n  [TYPES.FIENDS_BANISHED]: FIENDS,\n  [TYPES.GENDER]: GENDERS,\n  [TYPES.MARKET_ARMOR]: filterDataByKind('Armor', MARKET, marketCahce),\n  [TYPES.MARKET_SCROLL]: filterDataByKind('Scroll', MARKET, marketCahce),\n  [TYPES.MARKET_SKILL]: filterDataByKind('Skill', MARKET, marketCahce),\n  [TYPES.MARKET_TRAIT]: filterDataByKind('Trait', MARKET, marketCahce),\n  [TYPES.MARKET_WEAPON]: filterDataByKind('Weapon', MARKET, marketCahce),\n  [TYPES.MINION]: MINIONS,\n  [TYPES.MONSTER]: MONSTER,\n  [TYPES.MONSTER_LOCATION]: filterDataByKind('location', ADVENTURE, adventureCache),\n  [TYPES.MONSTER_OBSTACLE]: filterDataByKind('obstacle', ADVENTURE, adventureCache),\n  [TYPES.MONSTER_ATTACK]: filterDataByKind('attack', ADVENTURE, adventureCache),\n  [TYPES.RACE]: RACES,\n};\n\nexport function getTypeahead(type) {\n  if (typeaheadCache[type] === undefined) {\n    const data = switcher[type];\n\n    const typeheadData = Object.values(data).map((entry) => ({\n      value: entry.id,\n      text: entry.name,\n    }));\n\n    const sortedTypeaheadData = orderBy(typeheadData, 'text');\n\n    typeaheadCache[type] = sortedTypeaheadData;\n  }\n\n  return typeaheadCache[type];\n}\n\nexport function getAdventureTypeahead(data, monsterName) {\n  return Object.values(data).reduce((acc, entry) => {\n    if (entry.monster === monsterName) {\n      acc.push({\n        value: entry.id,\n        text: entry.name,\n      });\n    }\n    return acc;\n  }, []);\n}\n\nexport function getHashData(type) {\n  return switcher[type];\n}\n\nfunction filterDataByKind(kind, data, cache) {\n  if (cache[kind] === undefined) {\n    Object.values(data).forEach((card) => {\n      if (cache[card.kind] === undefined) {\n        cache[card.kind] = {};\n      }\n\n      cache[card.kind][card.id] = card;\n    });\n  }\n\n  return cache[kind];\n}\n","import { getHashData, getTypeahead, getAdventureTypeahead } from '../database';\nimport { TYPES } from './constants';\nimport { getClassColor } from './index';\n\nconst sessionUsedChache = {};\nconst sessionResetThreshold = {\n  [TYPES.RACE]: getTypeahead(TYPES.RACE).length,\n  [TYPES.CLASS]: getTypeahead(TYPES.CLASS).length,\n  [TYPES.ALIGNMENT]: getTypeahead(TYPES.ALIGNMENT).length,\n  [TYPES.FAMILIAR]: getTypeahead(TYPES.FAMILIAR).length,\n  [TYPES.FIENDS]: getTypeahead(TYPES.FIENDS).length,\n  [TYPES.BACKSTORY]: getTypeahead(TYPES.BACKSTORY).length,\n  [TYPES.MARKET_ARMOR]: getTypeahead(TYPES.MARKET_ARMOR).length,\n  [TYPES.MARKET_WEAPON]: getTypeahead(TYPES.MARKET_WEAPON).length,\n  [TYPES.MARKET_SKILL]: getTypeahead(TYPES.MARKET_SKILL).length,\n  [TYPES.MARKET_SCROLL]: getTypeahead(TYPES.MARKET_SCROLL).length,\n  [TYPES.MARKET_TRAIT]: getTypeahead(TYPES.MARKET_TRAIT).length,\n  [TYPES.MINION]: getTypeahead(TYPES.MINION).length,\n  [TYPES.MONSTER]: getTypeahead(TYPES.MONSTER).length,\n};\n\nexport function randomizeCharacter(initialState) {\n  const result = { ...initialState };\n  // Determine gender\n  result.gender = getRandomValueFromList(['male', 'female']);\n  // Deterime name\n  const firstName = getRandomValueFromList(NAMES[result.gender]);\n  const lastName = getLastName();\n  result.characterName = `${firstName}${lastName ? ` ${lastName}` : ''}`;\n  // Determine Race\n  result.race = getRandomUniqueEntryFromList(TYPES.RACE).id;\n  // Determine Class\n  result.class = getRandomUniqueEntryFromList(TYPES.CLASS).id;\n  // Determine Color\n  result.color = getClassColor(result.class);\n  // Determine Backstory\n  result.backstory = getRandomUniqueEntryFromList(TYPES.BACKSTORY).id;\n  // Determine Alignment\n  result.alignment = getRandomUniqueEntryFromList(TYPES.ALIGNMENT).id;\n  result.alignmentPos = getRandomValueFromList([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n  // Determine Items\n  const itemsQuantity = generateItemsQuantities();\n  result.weapons = getUniqueValuesFromList(TYPES.MARKET_WEAPON, itemsQuantity[0]);\n  result.armor = getUniqueValuesFromList(TYPES.MARKET_ARMOR, itemsQuantity[2]);\n  result.skills = getUniqueValuesFromList(TYPES.MARKET_SKILL, itemsQuantity[3]);\n  result.traits = getUniqueValuesFromList(TYPES.MARKET_TRAIT, itemsQuantity[4]);\n  result.scrolls = getUniqueValuesFromList(TYPES.MARKET_SCROLL, itemsQuantity[5]);\n  // Determine Trophies\n  result.minions = getUniqueValuesFromList(TYPES.MINION, getRandomNumber(0, 5));\n  // Determine Monster\n  const monster = getAppropriateMonster(result.class);\n  result.monster = monster.id;\n  result.isLenticularVersion = getRandomValueFromList([true, false]);\n  const adventureCards = getAppropriateAdventureCards(monster);\n  result.monsterLocation = adventureCards.location;\n  result.monsterObstacle = adventureCards.obstacle;\n  result.monsterAttack = adventureCards.attack;\n  result.monsterScore = getRandomNumber(10, 35);\n  // Determine Familiar\n  const familiar = getRandomUniqueEntryFromList(TYPES.FAMILIAR);\n  result.familiar = familiar.id;\n  result.familiarName = getRandomValueFromList(FAMILIAR_NAMES);\n  result.familiarPower = generateFamiliarPower(familiar['power-min'], familiar['power-max']);\n  // Determine Fiends\n  result.fiends = getUniqueValuesFromList(TYPES.FIENDS, getRandomNumber(0, 3));\n  result.fiendsBanished = getUniqueValuesFromList(TYPES.FIENDS, getRandomNumber(0, 3));\n  // Determine Numbers\n  result.xp = getRandomNumber(0, 8);\n  result.gold = getRandomNumber(0, 10);\n  result.score = getRandomNumber(20, 45);\n  // Determine Attributes\n  result.attributes = getAttributes(result.class, result.race);\n\n  return result;\n}\n\nfunction getRandomValueFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nfunction getRandomUniqueEntryFromList(type) {\n  let tries = 0;\n  // Create cache type entry, if it doesn't exist\n  if (sessionUsedChache[type] === undefined) {\n    sessionUsedChache[type] = {};\n  }\n\n  // If threshold was reached, reset cache\n  if (Object.keys(sessionUsedChache?.[type] ?? {}).length === sessionResetThreshold[type]) {\n    sessionUsedChache[type] = {};\n  }\n\n  // Get unique value\n  let result;\n  do {\n    result = getRandomValueFromList(getTypeahead(type));\n    ++tries;\n  } while (sessionUsedChache?.[type]?.[result.value] !== undefined && tries < 15);\n\n  // Update cache\n  sessionUsedChache[type][result.value] = true;\n\n  return getHashData(type)[result.value];\n}\n\nfunction getUniqueValuesFromList(type, quantity) {\n  return new Array(quantity).fill(null).map(() => getRandomUniqueEntryFromList(type).id);\n}\n\nfunction generateItemsQuantities() {\n  let left = 7;\n  const result = new Array(5).fill(0).map((i) => {\n    if (left > 0) {\n      let value = getRandomValueFromList([0, 1, 1, 2, 2]);\n      if (value > left) value = left;\n      left -= value;\n      return value;\n    }\n    return i;\n  });\n\n  if (left > 0) {\n    result.forEach((i) => {\n      if (left > 0 && i < 2) {\n        left -= 1;\n        i += 1;\n      }\n    });\n  }\n\n  return shuffleList(result);\n}\n\nfunction getRandomNumber(min = 0, max = 6) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction shuffleList(list) {\n  return list.sort(() => Math.random() - 0.5);\n}\n\nfunction generateFamiliarPower(min, max) {\n  const numberOfOptions = max - min + getRandomNumber(1, 3);\n  const options = [min, max];\n  for (let i = -2; i < numberOfOptions; i++) {\n    options.push(min + i);\n  }\n  return getRandomValueFromList(options);\n}\n\nfunction getAppropriateMonster(classId) {\n  // Create cache type entry, if it doesn't exist\n  if (sessionUsedChache[TYPES.MONSTER] === undefined) {\n    sessionUsedChache[TYPES.MONSTER] = {};\n  }\n\n  // If threshold was reached, reset cache\n  if (\n    Object.keys(sessionUsedChache?.[TYPES.MONSTER] ?? {}).length ===\n    sessionResetThreshold[TYPES.MONSTER]\n  ) {\n    sessionUsedChache[TYPES.MONSTER] = {};\n  }\n\n  // Get unique value\n  let result;\n  let allowed = false;\n  let tries = 0;\n  do {\n    allowed = true;\n    result = getRandomValueFromList(getTypeahead(TYPES.MONSTER));\n    if (result.color === getHashData(TYPES.CLASS)[classId]) {\n      allowed = false;\n    }\n\n    ++tries;\n  } while (\n    sessionUsedChache?.[TYPES.MONSTER]?.[result.value] !== undefined &&\n    !allowed &&\n    tries < 15\n  );\n\n  // Update cache\n  sessionUsedChache[TYPES.MONSTER][result.value] = true;\n\n  return getHashData(TYPES.MONSTER)[result.value];\n}\n\nfunction getAppropriateAdventureCards(monster) {\n  return {\n    location: getRandomValueFromList(\n      getAdventureTypeahead(getHashData(TYPES.MONSTER_LOCATION), monster.name)\n    ).value,\n    obstacle: getRandomValueFromList(\n      getAdventureTypeahead(getHashData(TYPES.MONSTER_OBSTACLE), monster.name)\n    ).value,\n    attack: getRandomValueFromList(\n      getAdventureTypeahead(getHashData(TYPES.MONSTER_ATTACK), monster.name)\n    ).value,\n  };\n}\n\nfunction getAttributes(classId, raceId) {\n  const characterClass = getHashData(TYPES.CLASS)[classId];\n  const characterRace = getHashData(TYPES.RACE)[raceId];\n\n  const result = [\n    getAttribute(characterClass.str, characterRace.str),\n    getAttribute(characterClass.dex, characterRace.dex),\n    getAttribute(characterClass.con, characterRace.con),\n    getAttribute(characterClass.int, characterRace.int),\n    getAttribute(characterClass.wis, characterRace.wis),\n    getAttribute(characterClass.cha, characterRace.cha),\n  ];\n\n  return {\n    str: result[0],\n    dex: result[1],\n    con: result[2],\n    int: result[3],\n    wis: result[4],\n    cha: result[5],\n  };\n}\n\nfunction getAttribute(baseGoal, modifier) {\n  const base = Number(`${baseGoal}`.substring(0, 2));\n\n  const goal = base + modifier;\n\n  let deviation = 0;\n  if (goal > 18) {\n    deviation = getRandomNumber(-2, 0);\n  } else if (goal >= 14 && baseGoal.length > 3) {\n    deviation = getRandomNumber(-1, 2);\n  } else {\n    deviation = getRandomNumber(-2, 3);\n  }\n\n  return base + deviation;\n}\n\nfunction getLastName() {\n  const prefix = getRandomValueFromList(FAMILY_NAMES.prefix);\n  const suffix = getRandomValueFromList(FAMILY_NAMES.suffix);\n  const separator = prefix === suffix ? '-' : '';\n  const familyName = `${prefix}${separator}${suffix}`;\n  return familyName.charAt(0).toUpperCase() + familyName.slice(1);\n}\n\nconst NAMES = {\n  male: [\n    'Arnold',\n    'Benji',\n    'Carlus',\n    'Dominique',\n    'Eldrin',\n    'Fin',\n    'Gustavos',\n    'Helius',\n    'Igor',\n    'John',\n    'Karl',\n    'Lynus',\n    'Lazarus',\n    'Magnus',\n    'Nimbus',\n    'Otto',\n    'Odo',\n    'Papa',\n    'Rashi',\n    'Serpentine',\n    'Tweedey',\n    'Thomas',\n    'Uurl',\n    'Vance',\n    'Willy',\n    'Wellington',\n    'Xanadu',\n    'Yvanhoe',\n    'Zulu',\n  ],\n  female: [\n    'Anna',\n    'Bella',\n    'Corrie',\n    'Dame',\n    'Ella',\n    'Fang',\n    'Gemma',\n    'Gala',\n    'Helena',\n    'Higrid',\n    'Indi',\n    'June',\n    'Kiara',\n    'Lana',\n    'Mim',\n    'Nina',\n    'Olga',\n    'Pat',\n    'Reika',\n    'Rashina',\n    'Sansa',\n    'Titi',\n    'Ursula',\n    'Una',\n    'Vara',\n    'Wholpi',\n    'Xaxa',\n    'Xena',\n    'Yanna',\n    'Zoe',\n  ],\n};\n\nconst FAMILY_NAMES = {\n  prefix: [\n    'thunder',\n    'scar',\n    'star',\n    'brave',\n    'heart',\n    'oak',\n    'iron',\n    'golden',\n    'silver',\n    'oath',\n    'snow',\n    'dark',\n    '',\n  ],\n  suffix: [\n    'sun',\n    'moon',\n    'bolt',\n    'lion',\n    'wolf',\n    'light',\n    'soul',\n    'scare',\n    'dust',\n    'eye',\n    'shot',\n    'heart',\n    'keeper',\n    'white',\n    'lord',\n    '',\n  ],\n};\n\nconst FAMILIAR_NAMES = [\n  'Buddy',\n  'Spark',\n  'Popo',\n  'Sam',\n  'Boo',\n  'Ham',\n  'Remmy',\n  'Pip',\n  'Baby',\n  'Devil',\n  'Jambo',\n  'Jimbo',\n  'Zeus',\n  'Marsa',\n  'Jupiter',\n  'Venus',\n  'Pluto',\n  'Galak',\n  'Athena',\n  'Moon',\n  'Alaska',\n  '',\n];\n","import { getHashData, getAdventureTypeahead } from '../database';\nimport { TYPES } from './constants';\n\nexport * from './randomizer';\n\nconst removeFalsy = (item) => item;\n\n/**\n * Check if all required fields in a character object are filled\n * @param {object} tome the object with the tome data\n * @returns {boolean}\n */\nexport function determineCharacterCompletion(tome) {\n  // If text fields are empty\n  if (!tome.characterName || !tome.player) return false;\n\n  // If mandatory fields are empty\n  if (!tome.race || !tome.class || !tome.backstory || !tome.alignment) return false;\n\n  // If attributes are less than 3\n  if (Object.values(tome.attributes).some((attr) => attr < 3)) return false;\n\n  // If monster, but no location, obstacle, or attack\n  if (tome.monster && (!tome.monsterLocation || !tome.monsterObstacle || !tome.monsterAttack))\n    return false;\n\n  // If has familiar, but power is less then 3\n  if (tome.familiar && tome.familiarPower < 3) return false;\n\n  return true;\n}\n\n/**\n * Parses a character tome object to be database ready before saving\n * @param {object} tome the object with the tome data\n * @returns {object}\n */\nexport function deserializeCharacter(tome) {\n  const result = {\n    id: tome.characterId,\n    name: tome.characterName,\n    race: tome.race,\n    class: tome.class,\n    gender: tome.gender,\n    backstory: tome.backstory,\n    'attribute-scores': tome.attributes,\n    alignment: {\n      id: tome.alignment,\n      position: Number(tome.alignmentPos),\n    },\n    items: {\n      armor: tome.armor?.sort(),\n      weapons: tome.weapons?.sort(),\n      scrolls: tome.scrolls?.sort(),\n    },\n    skills: tome.skills?.sort(),\n    traits: tome.traits?.sort(),\n    battle: {\n      monster: tome.monster,\n      alternativeLenticularVersion: tome.isLenticularVersion || null,\n      location: tome.monsterLocation,\n      obstacle: tome.monsterObstacle,\n      attack: tome.monsterAttack,\n      minions: tome.minions?.sort(),\n      score: Number(tome.monsterScore),\n    },\n    fiends: {\n      active: tome.fiends?.sort(),\n      banished: tome.fiendsBanished?.sort(),\n    },\n    counts: {\n      experience: Number(tome.xp),\n      gold: Number(tome.gold),\n      score: Number(tome.score),\n    },\n    player: tome.player,\n    'created-at': tome.date ?? getTodaysDate(),\n  };\n\n  if (tome.familiar) {\n    result.familiar = {\n      id: tome.familiar,\n      name: tome.familiarName ?? 'Unnamed',\n      power: Number(tome.familiarPower),\n    };\n  }\n\n  return result;\n}\n\n/**\n * Parses a character tome object to JsonApi format used by Code Dialog\n * @param {object} tome the object with the tome data\n * @return {object}\n */\nexport function getCharacterJsonApi(tome) {\n  return {\n    id: tome.character ?? null,\n    type: 'roll-player-character',\n    attributes: {\n      name: tome.characterName,\n      race: getHashData(TYPES.RACE)[tome.race]?.name ?? '',\n      class: getHashData(TYPES.CLASS)[tome.class]?.name ?? '',\n      gender: getHashData(TYPES.GENDER)[tome.gender]?.name ?? 'Unkown',\n      backstory: getHashData(TYPES.BACKSTORY)[tome.backstory]?.name ?? '',\n      'attribute-rp-scores': getAttributeScores(tome.attributes, tome.race),\n      'attribute-rpa-scores': getRPAAttributeScores(tome.attributes, tome.race),\n      alignment: getAlignmentScore(tome.alignment, tome.alignmentPos),\n      items: {\n        armor: tome.armor\n          .map((id) => getHashData(TYPES.MARKET_ARMOR)[id]?.name ?? '')\n          .sort()\n          .filter(removeFalsy),\n        weapons: tome.weapons\n          .map((id) => getHashData(TYPES.MARKET_WEAPON)[id]?.name ?? '')\n          .sort()\n          .filter(removeFalsy),\n        scrolls: tome.scrolls\n          .map((id) => getHashData(TYPES.MARKET_SCROLL)[id]?.name ?? null)\n          .sort()\n          .filter(removeFalsy),\n      },\n      skills: tome.skills\n        .map((id) => getHashData(TYPES.MARKET_SKILL)[id]?.name ?? '')\n        .sort()\n        .filter(removeFalsy),\n      traits: tome.traits\n        .map((id) => getHashData(TYPES.MARKET_TRAIT)[id]?.name ?? '')\n        .sort()\n        .filter(removeFalsy),\n      battle: {\n        monster: `${getHashData(TYPES.MONSTER)[tome.monster]?.name ?? ''}${\n          tome.isLenticularVersion ? ' (Lenticular version)' : ''\n        }`,\n        location: getHashData(TYPES.MONSTER_LOCATION)[tome.monsterLocation]?.name ?? '',\n        obstacle: getHashData(TYPES.MONSTER_OBSTACLE)[tome.monsterObstacle]?.name ?? '',\n        attack: getHashData(TYPES.MONSTER_ATTACK)[tome.monsterAttack]?.name ?? '',\n        minions: tome.minions\n          .map((id) => getHashData(TYPES.MINION)[id]?.name ?? '')\n          .sort()\n          .filter(removeFalsy),\n        score: Number(tome.monsterScore) ?? 0,\n      },\n      familiar: {\n        species: getHashData(TYPES.FAMILIAR)[tome.familiar]?.name ?? '',\n        name: tome.familiarName,\n        power: Number(tome.familiarPower),\n      },\n      fiends: {\n        active: tome.fiends\n          .map((id) => getHashData(TYPES.FIENDS)[id]?.name ?? '')\n          .sort()\n          .filter(removeFalsy),\n        banished: tome.fiendsBanished\n          .map((id) => getHashData(TYPES.FIENDS)[id]?.name ?? '')\n          .sort()\n          .filter(removeFalsy),\n      },\n      counts: {\n        experience: Number(tome.xp),\n        gold: Number(tome.gold),\n        score: Number(tome.score),\n        health: getHealth(tome.score, tome.fiends),\n      },\n    },\n    meta: {\n      'created-by': tome.player,\n      'created-at': tome.date ?? new Date(),\n    },\n  };\n}\n\n/**\n * Generates a multiline string with the character stats used by the Download txt feature\n * @param {object} tome the object with the tome data\n * @return {string}\n */\nexport function getCharacterTextString(tome) {\n  let result = '';\n\n  function getLine(length, separator = '-') {\n    return `${new Array(length).fill(separator).join('')}`;\n  }\n\n  function addLine(length = 15) {\n    result += getLine(length);\n  }\n\n  function addTitle(title) {\n    const titleLine = getLine(title.length, '=');\n    result += `\\n${titleLine}\\n${title.toUpperCase()}\\n${titleLine}\\n\\n`;\n  }\n\n  function addSection(title) {\n    const sLine = getLine(title.length, '-');\n    result += `\\n${sLine.toUpperCase()}\\n${title.toUpperCase()}\\n${sLine}\\n\\n`;\n  }\n\n  function addSubSection(title) {\n    const ssLine = getLine(title.length, '-');\n    result += `\\n${title.toUpperCase()}\\n${ssLine}\\n\\n`;\n  }\n\n  function addText(text) {\n    result += `${text}\\n`;\n  }\n\n  function addListItem(item) {\n    result += `    - ${item}\\n`;\n  }\n\n  function addList(list = []) {\n    if (list.length === 0) {\n      addListItem('N/A');\n    } else {\n      for (let i = 0; i < list.length; i++) {\n        addListItem(list[i]);\n      }\n    }\n  }\n\n  function addLineBreak(num = 1) {\n    for (let i = 0; i < num; i++) {\n      result += '\\n';\n    }\n  }\n\n  // BUILD\n  addTitle('Roll Player Hero Tome');\n  addText(`Created by ${tome.player} on ${tome.date}`);\n  addSection(`Character: ${tome.characterName}`);\n  addText(`Race: ${getHashData(TYPES.RACE)[tome.race]?.name}`);\n  addText(`Class: ${getHashData(TYPES.CLASS)[tome.class]?.name}`);\n  addText(`Gender: ${getHashData(TYPES.GENDER)[tome.gender]?.name}`);\n  addText(`Backstory: ${getHashData(TYPES.BACKSTORY)[tome.backstory]?.name}`);\n  addSubSection('Attributes');\n  const attributesObj = getCombinedAttributeScores(tome.attributes, tome.race);\n  addText(`STR = ${attributesObj.str[1]} (${attributesObj.str[0]})`);\n  addText(`DEX = ${attributesObj.dex[1]} (${attributesObj.dex[0]})`);\n  addText(`CON = ${attributesObj.con[1]} (${attributesObj.con[0]})`);\n  addText(`INT = ${attributesObj.int[1]} (${attributesObj.int[0]})`);\n  addText(`WIS = ${attributesObj.wis[1]} (${attributesObj.wis[0]})`);\n  addText(`CHA = ${attributesObj.cha[1]} (${attributesObj.cha[0]})`);\n  if (attributesObj.addDice) {\n    addLine(\n      `\\n// Add ${attributesObj.addDice} to any attribute score before playing Roll Player Adventures`\n    );\n  }\n  addSubSection('Alignment');\n  const alignmentObj = getAlignmentScore(tome.alignment, tome.alignmentPos);\n  addText(`${alignmentObj.name} (${alignmentObj.title})`);\n  addText(`Points: ${alignmentObj.score}`);\n  addSection('Stats');\n  addListItem(`Health: ${getHealth(tome.score, tome.fiends)}`);\n  addListItem(`Experience: ${tome.xp}`);\n  addListItem(`Gold: ${tome.gold}`);\n  addSection('Items/Abilities');\n  addSubSection('Armor');\n  addList(tome.armor.map((id) => getHashData(TYPES.MARKET_ARMOR)[id]?.name ?? '').sort());\n  addSubSection('Weapons');\n  addList(tome.weapons.map((id) => getHashData(TYPES.MARKET_WEAPON)[id]?.name ?? '').sort());\n  addSubSection('Scrolls');\n  addList(tome.scrolls.map((id) => getHashData(TYPES.MARKET_SCROLL)[id]?.name ?? '').sort());\n  addSubSection('Skills');\n  addList(tome.skills.map((id) => getHashData(TYPES.MARKET_SKILL)[id]?.name ?? '').sort());\n  addSubSection('Traits');\n  addList(tome.traits.map((id) => getHashData(TYPES.MARKET_TRAIT)[id]?.name ?? '').sort());\n  addSection('Familiar');\n  if (tome.familiar) {\n    if (tome.familiarName && tome.familiarName !== 'Unnamed') {\n      addText(\n        `${tome.familiarName}, the ${\n          getHashData(TYPES.FAMILIAR)[tome.familiar]?.name ?? ''\n        } (Power: ${tome.familiarPower})`\n      );\n    } else {\n      addText(\n        `${getHashData(TYPES.FAMILIAR)[tome.familiar]?.name ?? ''} (Power: ${tome.familiarPower})`\n      );\n    }\n  } else {\n    addListItem('N/A');\n  }\n\n  addSection('Enemies');\n  addSubSection(`Monter: ${getHashData(TYPES.MONSTER)[tome.monster]?.name ?? ''}`);\n  addListItem(`Location: ${getHashData(TYPES.MONSTER_LOCATION)[tome.monsterLocation]?.name ?? ''}`);\n  addListItem(`Obstacle: ${getHashData(TYPES.MONSTER_OBSTACLE)[tome.monsterObstacle]?.name ?? ''}`);\n  addListItem(`Attack: ${getHashData(TYPES.MONSTER_ATTACK)[tome.monsterAttack]?.name ?? ''}`);\n  addListItem(`Monster Score: ${tome.monsterScore || 'Unknown'}`);\n  addSubSection('Minions');\n  addList(tome.minions.map((id) => getHashData(TYPES.MINION)[id]?.name ?? '').sort());\n\n  addSubSection('Fiends');\n  const allFiends = [];\n  tome.fiends.forEach((id) => allFiends.push(getHashData(TYPES.FIENDS)[id]?.name ?? ''));\n  tome.fiendsBanished.forEach((id) =>\n    allFiends.push(`${getHashData(TYPES.FIENDS_BANISHED)[id]?.name ?? ''} (Banished)`)\n  );\n  addList(allFiends.sort());\n  addLineBreak(2);\n  addSection('Final Score');\n  addText(`${tome.score} reputation stars`);\n  return result;\n}\n\n/**\n * Gets the specific adventure data (location, obstable, attack) based on the given monster name\n * @param {symbol} type the type symbol\n * @param {string} monsterName the monster name\n * @returns {object} the hash dictionary and typeahead for the adventure type\n */\nexport function getMonsterAdventureData(type, monsterName) {\n  const dict = getHashData(type);\n  return {\n    dict,\n    typeahead: getAdventureTypeahead(dict, monsterName),\n  };\n}\n\nfunction getAttributeScores(attributes, raceId) {\n  const raceData = getHashData(TYPES.RACE)?.[raceId];\n\n  return {\n    str: (attributes.str ?? 0) + (raceData?.str ?? 0),\n    dex: (attributes.dex ?? 0) + (raceData?.dex ?? 0),\n    con: (attributes.con ?? 0) + (raceData?.con ?? 0),\n    int: (attributes.int ?? 0) + (raceData?.int ?? 0),\n    wis: (attributes.wis ?? 0) + (raceData?.wis ?? 0),\n    cha: (attributes.cha ?? 0) + (raceData?.cha ?? 0),\n  };\n}\n\nfunction getRPAAttributeScores(attributes, raceId) {\n  const rpAttributes = getAttributeScores(attributes, raceId);\n\n  function getAttrValue(val) {\n    if (val < 14) return 0;\n    if (val < 16) return 1;\n    if (val < 18) return 2;\n    return 3;\n  }\n\n  return {\n    str: getAttrValue(rpAttributes.str),\n    dex: getAttrValue(rpAttributes.dex),\n    con: getAttrValue(rpAttributes.con),\n    int: getAttrValue(rpAttributes.int),\n    wis: getAttrValue(rpAttributes.wis),\n    cha: getAttrValue(rpAttributes.cha),\n  };\n}\n\nfunction getCombinedAttributeScores(attributes, raceId) {\n  const rpAttributes = getAttributeScores(attributes, raceId);\n  const rpaAttributes = getRPAAttributeScores(attributes, raceId);\n\n  const addDice = Object.values(rpaAttributes).reduce((acc, entry) => {\n    acc -= entry;\n    if (acc < 0) acc = 0;\n    return acc;\n  }, 6);\n\n  return {\n    str: [rpAttributes.str, rpaAttributes.str],\n    dex: [rpAttributes.dex, rpaAttributes.dex],\n    con: [rpAttributes.con, rpaAttributes.con],\n    int: [rpAttributes.int, rpaAttributes.int],\n    wis: [rpAttributes.wis, rpaAttributes.wis],\n    cha: [rpAttributes.cha, rpaAttributes.cha],\n    addDice,\n  };\n}\n\nfunction getAlignmentScore(alignmentId, position = 4) {\n  const aligmentData = getHashData(TYPES.ALIGNMENT)?.[alignmentId];\n\n  const values = aligmentData?.values?.split(',').map(Number) ?? [];\n\n  const titles = {\n    0: 'Lawful-Good',\n    1: 'Neutral-Good',\n    2: 'Chaotic-Good',\n    3: 'Lawful-Neutral',\n    4: 'Neutraul-Neutral',\n    5: 'Chaotic-Neutral',\n    6: 'Lawful-Evil',\n    7: 'Neutral-Evil',\n    8: 'Chaotic-Evil',\n  };\n\n  return {\n    name: aligmentData?.name ?? '',\n    title: titles[position],\n    score: values[position],\n  };\n}\n\nfunction getHealth(score, fiends) {\n  const fiendsCount = fiends.length;\n\n  if (score < 21) return 14 - fiendsCount;\n  if (score < 26) return 15 - fiendsCount;\n  if (score < 36) return 16 - fiendsCount;\n  if (score < 41) return 17 - fiendsCount;\n  return 18 - fiendsCount;\n}\n\n/**\n * Generate a useGlobalState object with a character data based on given id\n * merging with the existing initial state\n * @param {array} characters the list of characters from the database\n * @param {string} id the id of the character to be searched in the list\n * @param {object} initialState useGlobalState default object\n */\nexport function loadCharacterFromDatabase(characters, id, initialState) {\n  // Find character\n  const character = characters.filter((c) => c.id === id)[0];\n\n  const state = {\n    ...initialState,\n    alignment: character.alignment.id,\n    alignmentPos: character.alignment.position,\n    armor: character?.items?.armor ?? [],\n    attributes: {\n      str: character['attribute-scores'].str ?? 0,\n      dex: character['attribute-scores'].dex ?? 0,\n      con: character['attribute-scores'].con ?? 0,\n      int: character['attribute-scores'].int ?? 0,\n      wis: character['attribute-scores'].wis ?? 0,\n      cha: character['attribute-scores'].cha ?? 0,\n    },\n    backstory: character.backstory,\n    characterId: character.id,\n    characterName: character.name,\n    class: character.class,\n    date: character['created-at'],\n    familiar: character?.familiar?.id ?? null,\n    familiarPower: Number(character?.familiar?.power ?? 0),\n    familiarName: character?.familiar?.name ?? null,\n    gender: character.gender,\n    gold: Number(character.counts.gold),\n    minions: character?.battle?.minions ?? [],\n    monster: character?.battle?.monster ?? null,\n    monsterAttack: character?.battle?.attack ?? null,\n    monsterLocation: character?.battle?.location ?? null,\n    monsterObstacle: character?.battle?.obstacle ?? null,\n    monsterScore: character?.battle?.score ?? 0,\n    isLenticularVersion: character?.battle?.alternativeLenticularVersion ?? false,\n    player: character?.player,\n    race: character.race,\n    score: Number(character.counts.score),\n    scrolls: character?.items?.scrolls ?? [],\n    skills: character?.skills ?? [],\n    traits: character?.traits ?? [],\n    weapons: character?.items?.weapons ?? [],\n    xp: 0,\n  };\n\n  if (character.fiends) {\n    if (Array.isArray(character.fiends)) {\n      state.fiends = character?.fiends ?? [];\n    } else {\n      state.fiends = character?.fiends?.active ?? [];\n      state.fiendsBanished = character?.fiends?.banished ?? [];\n    }\n  }\n\n  return state;\n}\n\n/**\n * Gets today's date in the YYYY-MM-DD format\n * @returns {string}\n */\nexport function getTodaysDate() {\n  const now = new Date();\n  let day = now.getDate();\n  let month = now.getMonth() + 1;\n  const year = now.getFullYear();\n\n  if (month < 10) month = `0${month}`;\n  if (day < 10) day = `0${day}`;\n\n  return `${year}-${month}-${day}`;\n}\n\n/**\n * Returns the first elememnt that has a 'value' that matches given id\n * @param {array} list\n * @param {string} id\n * @returns {object}\n */\nexport function getEntryById(list, id) {\n  return list.filter((o) => o.value === id)[0];\n}\n\n/**\n * Returns every element in given list that matches any id in the list of ids\n * @param {array} list\n * @param {array} ids\n * @returns {array}\n */\nexport function getEntriesByIds(list, ids) {\n  return list.filter((o) => ids.includes(o.value));\n}\n\n/**\n * Gets the color value for given class\n * @param {string} classId\n */\nexport function getClassColor(classId) {\n  return getHashData(TYPES.CLASS)[classId]?.color ?? null;\n}\n","import { createGlobalState } from 'react-hooks-global-state';\n\nimport { SCREENS, REFRESH_TIMER } from './utils/constants';\nimport { getTodaysDate } from './utils';\n\nexport const initialState = {\n  // App Global\n  activeDialog: null,\n  screen: SCREENS.FORM,\n  color: null,\n  toaster: null,\n\n  // App\n  characterObject: null,\n  deserializedCharacter: null,\n  isCharacterGenerated: false,\n  isCharacterComplete: false,\n  isSavingEnabled: false,\n\n  // Character Fields\n  characterId: null,\n  characterName: '',\n  player: '',\n  race: null,\n  class: null,\n  gender: null,\n  backstory: null,\n  attributes: {\n    str: 0,\n    dex: 0,\n    con: 0,\n    int: 0,\n    wis: 0,\n    cha: 0,\n  },\n  alignment: null,\n  alignmentPos: 4,\n  weapons: [],\n  armor: [],\n  skills: [],\n  traits: [],\n  scrolls: [],\n  minions: [],\n  xp: 0,\n  gold: 0,\n  score: 0,\n  date: getTodaysDate(),\n  familiar: null,\n  familiarName: null,\n  familiarPower: 0,\n  fiends: [],\n  fiendsBanished: [],\n  monster: null,\n  monsterLocation: null,\n  monsterObstacle: null,\n  monsterAttack: null,\n  monsterScore: 0,\n  isLenticularVersion: false,\n};\n\nconst { useGlobalState, setGlobalState: setGlobalStateCGS, setState, getState } = createGlobalState(\n  initialState\n);\n\nexport function resetGlobalState() {\n  setGlobalState('screen', SCREENS.REFRESH);\n  setTimeout(() => {\n    setState({ ...initialState });\n  }, REFRESH_TIMER);\n}\n\nexport const getCompleteGlobalState = getState;\n\nexport const setGlobalState = setGlobalStateCGS;\n\nexport const setCompleteGlobalState = setState;\n\nexport default useGlobalState;\n","import React, { Fragment, useState } from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport PrintIcon from '@material-ui/icons/Print';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CodeIcon from '@material-ui/icons/Code';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\n\nimport useGlobalState, {\n  resetGlobalState,\n  setCompleteGlobalState,\n  initialState,\n} from '../useGlobalState';\nimport { randomizeCharacter } from '../utils';\nimport { DIALOGS, SCREENS, REFRESH_TIMER } from '../utils/constants';\n\nexport default function Header() {\n  const [, setActiveDialog] = useGlobalState('activeDialog');\n  const [isSavingEnabled, setIsSavingEnabled] = useGlobalState('isSavingEnabled');\n  const [color] = useGlobalState('color');\n  const [, setScreen] = useGlobalState('screen');\n  // Local state\n  const [saveClickCount, setSaveClickCount] = useState(0);\n\n  const handleEditClick = () => {\n    if (!isSavingEnabled) {\n      setSaveClickCount((v) => ++v);\n      if (saveClickCount > 1) {\n        setIsSavingEnabled(true);\n      }\n    }\n  };\n\n  const handleRandomizer = () => {\n    setScreen(SCREENS.REFRESH);\n\n    setTimeout(() => {\n      setCompleteGlobalState(randomizeCharacter(initialState));\n      setScreen(SCREENS.FORM);\n    }, REFRESH_TIMER);\n  };\n\n  const handleOpenPrintDialog = () => {\n    setActiveDialog(DIALOGS.PRINT);\n  };\n\n  const handleOpenCodeDialog = () => {\n    setActiveDialog(DIALOGS.CODE);\n  };\n\n  const handleOpenImportDialog = () => {\n    setActiveDialog(DIALOGS.IMPORT);\n  };\n\n  const handleOpenSaveDialog = () => {\n    setActiveDialog(DIALOGS.SAVE);\n  };\n\n  const iconColor = color === 'white' || !color ? '#232c33' : '#ffffff';\n\n  return (\n    <header className={`header app-color--${color}`}>\n      <IconButton\n        className=\"header-button\"\n        aria-label=\"reset\"\n        title=\"Reset\"\n        onClick={resetGlobalState}\n      >\n        <RotateLeftIcon style={{ color: iconColor }} />\n      </IconButton>\n      <h1 onClick={handleEditClick}>Roll Player: Hero Tome</h1>\n      {isSavingEnabled && (\n        <Fragment>\n          <IconButton\n            className=\"header-button\"\n            aria-label=\"import\"\n            title=\"Import\"\n            onClick={handleOpenImportDialog}\n          >\n            <ListAltIcon style={{ color: iconColor }} />\n          </IconButton>\n          <IconButton\n            className=\"header-button\"\n            aria-label=\"save\"\n            title=\"Save\"\n            onClick={handleOpenSaveDialog}\n          >\n            <SaveIcon style={{ color: iconColor }} />\n          </IconButton>\n        </Fragment>\n      )}\n      <IconButton\n        className=\"header-button\"\n        aria-label=\"randomize\"\n        title=\"Randomizer\"\n        onClick={handleRandomizer}\n      >\n        <ShuffleIcon style={{ color: iconColor }} />\n      </IconButton>\n      <IconButton\n        className=\"header-button\"\n        aria-label=\"print\"\n        title=\"Print\"\n        onClick={handleOpenPrintDialog}\n      >\n        <PrintIcon style={{ color: iconColor }} />\n      </IconButton>\n      <IconButton\n        className=\"header-button\"\n        aria-label=\"code\"\n        title=\"Text\"\n        onClick={handleOpenCodeDialog}\n      >\n        <CodeIcon style={{ color: iconColor }} />\n      </IconButton>\n    </header>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function Toaster() {\n  // Global State\n  const [toaster, setToater] = useGlobalState('toaster');\n  // Local state\n  const [isActive, setIsActive] = useState(false);\n\n  // Activate toast bar whenever toaster changes\n  useEffect(() => {\n    setIsActive(Boolean(toaster));\n  }, [toaster]);\n\n  const closeToaster = () => {\n    setToater(null);\n  };\n\n  return (\n    <Snackbar open={isActive} autoHideDuration={4000} onClose={closeToaster}>\n      <Alert onClose={closeToaster} severity={toaster?.severity} elevation={6} variant=\"filled\">\n        {toaster?.message}\n      </Alert>\n    </Snackbar>\n  );\n}\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\n\nimport { GLOBAL_STATE_ALIAS, FORM_LABELS } from '../utils/constants';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function FormInput({ type, inputType = 'text', classModifier = '' }) {\n  // Global States\n  const [entry, setEntry] = useGlobalState(GLOBAL_STATE_ALIAS[type]);\n\n  const handleChange = (event) => {\n    setEntry(event.target.value);\n  };\n\n  return (\n    <FormControl className={`form-item form-item--text form-item--${classModifier}`}>\n      <TextField\n        id={GLOBAL_STATE_ALIAS[type]}\n        label={FORM_LABELS[type]}\n        onChange={handleChange}\n        defaultValue={entry}\n        type={inputType}\n      />\n    </FormControl>\n  );\n}\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport { getTypeahead, getHashData } from '../database';\nimport { getEntryById } from '../utils';\nimport { GLOBAL_STATE_ALIAS, FORM_LABELS } from '../utils/constants';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function FormAutocomplete({\n  type,\n  classModifier = '',\n  data = null,\n  isDisabled = false,\n}) {\n  // Global States\n  const [entry, setEntry] = useGlobalState(GLOBAL_STATE_ALIAS[type]);\n\n  let entryDict = {};\n  let entryTypeahead = [];\n\n  if (data) {\n    entryDict = data.dict;\n    entryTypeahead = data.typeahead;\n  } else {\n    entryDict = getHashData(type);\n    entryTypeahead = getTypeahead(type);\n  }\n\n  const handleInputChange = (event) => {\n    const index = event?.target.getAttribute('data-option-index');\n    if (entryTypeahead[index]) {\n      const id = entryTypeahead[index].value;\n      setEntry(id);\n    }\n  };\n\n  const handleChange = (_, selectedEntry) => {\n    if (entryDict[selectedEntry?.value]) {\n      setEntry(selectedEntry.value);\n    } else {\n      setEntry(null);\n    }\n  };\n\n  const label = FORM_LABELS[type];\n\n  return (\n    <FormControl className={`form-item form-item--autocomplete form-item--${classModifier}`}>\n      <Autocomplete\n        id={label}\n        options={entryTypeahead}\n        defaultValue={getEntryById(entryTypeahead, entry)}\n        getOptionLabel={(option) => option.text}\n        getOptionSelected={(option) => option.value === entryDict?.[entry]?.id}\n        renderInput={(params) => <TextField {...params} label={label} />}\n        onInputChange={handleInputChange}\n        onChange={handleChange}\n        disabled={isDisabled}\n        autoHighlight\n      />\n    </FormControl>\n  );\n}\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport { getTypeahead } from '../database';\nimport { getEntriesByIds } from '../utils';\nimport { GLOBAL_STATE_ALIAS, FORM_LABELS } from '../utils/constants';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function FormAutocompleteMulti({ type, classModifier = '' }) {\n  // Global States\n  const [entry, setEntry] = useGlobalState(GLOBAL_STATE_ALIAS[type]);\n\n  const entryTypeahead = getTypeahead(type);\n\n  const handleChange = (_, newInput) => {\n    const ids = newInput.map((o) => o.value);\n    setEntry(ids);\n  };\n\n  const label = FORM_LABELS[type];\n\n  return (\n    <FormControl className={`form-item form-item--autocomplete form-item--${classModifier}`}>\n      <Autocomplete\n        multiple\n        id={label}\n        options={entryTypeahead}\n        defaultValue={getEntriesByIds(entryTypeahead, entry)}\n        getOptionLabel={(option) => option.text}\n        filterSelectedOptions\n        renderInput={(params) => <TextField {...params} label={label} variant=\"outlined\" />}\n        onChange={handleChange}\n        autoHighlight\n      />\n    </FormControl>\n  );\n}\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\n\nimport { getHashData } from '../database';\nimport { ATTRIBUTES, TYPES } from '../utils/constants';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function FormAttributes() {\n  // Global States\n  const [attributes] = useGlobalState('attributes');\n  const [race] = useGlobalState('race');\n\n  const raceData = getHashData(TYPES.RACE)?.[race];\n\n  return (\n    <FormControl className={`form-item form-item--attributes form-item--half`}>\n      <div className=\"attributes-grid attribute-header\">\n        <span className=\"attribute-header-label\">Attributes</span>\n        <span className=\"attribute-header--label\">Attribute Score</span>\n        <span className=\"attribute-sign invisible\">-</span>\n        <span className=\"attribute-header--label\">Racial Modifier</span>\n        <span className=\"attribute-sign invisible\">-</span>\n        <span className=\"attribute-header--label\">Total</span>\n      </div>\n      {Object.entries(ATTRIBUTES).map(([key, name]) => {\n        return (\n          <Attribute\n            key={key}\n            type={key}\n            name={name}\n            modifier={raceData?.[key]}\n            value={attributes[key]}\n            isDisabled={!Boolean(race)}\n          />\n        );\n      })}\n    </FormControl>\n  );\n}\n\nfunction Attribute({ type, name, modifier, value, isDisabled }) {\n  // Global States\n  const [, setAttributes] = useGlobalState('attributes');\n  const [color] = useGlobalState('color');\n\n  const handleChange = (event) => {\n    setAttributes((s) => ({ ...s, [type]: +event.target.value }));\n  };\n\n  const total = (value ?? 0) + (modifier ?? 0);\n\n  return (\n    <div className={`attributes-grid attributes-grid--${color}`}>\n      <label className=\"attribute-label\">\n        <span className=\"attribute-label__key\">{type}</span>\n        <span className=\"attribute-label__name\">{name}</span>\n      </label>\n      <input\n        type=\"number\"\n        className=\"attribute-score\"\n        disabled={isDisabled}\n        defaultValue={value}\n        onChange={handleChange}\n      />\n      <span className=\"attribute-sign\">+</span>\n      <input type=\"number\" className=\"attribute-race-modifier\" value={modifier ?? 0} readOnly />\n      <span className=\"attribute-sign\">=</span>\n      <input\n        type=\"number\"\n        className=\"attribute-race-total\"\n        value={total}\n        min=\"0\"\n        max=\"30\"\n        readOnly\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport { getTypeahead, getHashData } from '../database';\nimport { getEntryById } from '../utils';\nimport { TYPES } from '../utils/constants';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function FormAlignment() {\n  // Global States\n  const [alignment, setAlignment] = useGlobalState('alignment');\n  const [alignmentPos, setAlignmentPos] = useGlobalState('alignmentPos');\n  const [color] = useGlobalState('color');\n\n  const alignmentDict = getHashData(TYPES.ALIGNMENT);\n  const alignmentTypeahead = getTypeahead(TYPES.ALIGNMENT);\n\n  const handleInputChange = (event) => {\n    const index = event?.target.getAttribute('data-option-index');\n    if (alignmentTypeahead[index]) {\n      const id = alignmentTypeahead[index].value;\n      setAlignment(id);\n    }\n  };\n\n  const handleChange = (_, selectedEntry) => {\n    if (alignmentDict[selectedEntry?.value]) {\n      setAlignment(selectedEntry.value);\n    } else {\n      setAlignment(null);\n    }\n  };\n\n  const handleChangeAlignmentPos = (event) => {\n    setAlignmentPos(+event.target.id);\n  };\n\n  const alignmentGridPlaceholder = new Array(9).fill(0);\n\n  const alignmentModifiers = alignmentDict?.[alignment]?.values?.split(',').map(Number);\n\n  const activeModifiers = alignmentModifiers ?? alignmentGridPlaceholder;\n\n  return (\n    <FormControl className={`form-item form-item--alignment form-item--half`}>\n      <Autocomplete\n        id=\"alignment\"\n        options={alignmentTypeahead}\n        defaultValue={getEntryById(alignmentTypeahead, alignment)}\n        getOptionLabel={(option) => option.text}\n        getOptionSelected={(option) => option.value === alignmentDict?.[alignment]?.id}\n        renderInput={(params) => <TextField {...params} label=\"Alignment\" />}\n        onInputChange={handleInputChange}\n        onChange={handleChange}\n        autoHighlight\n      />\n      <div className=\"alignment-grid\">\n        <div className=\"alignment-grid__lawful\">Lawful</div>\n        <div className=\"alignment-grid__good\">Good</div>\n        <div className=\"alignment-grid__chaotic\">Chaotic</div>\n        <div className=\"alignment-grid__evil\">Evil</div>\n        <div className=\"alignment-grid__boxes\">\n          {activeModifiers.map((val, index) => {\n            const activeClass =\n              alignmentPos === index ? `alignment-box--active alignment-box--${color}` : '';\n            return (\n              <button\n                className={`alignment-box ${activeClass}`}\n                id={`${index}`}\n                key={`al-key-${index}`}\n                onClick={handleChangeAlignmentPos}\n                disabled={!Boolean(alignment)}\n              >\n                {val}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </FormControl>\n  );\n}\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { GLOBAL_STATE_ALIAS, FORM_LABELS } from '../utils/constants';\n\nimport useGlobalState from '../useGlobalState';\n\nexport default function FormCheckbox({ type, classModifier = '' }) {\n  // Global States\n  const [entry, setEntry] = useGlobalState(GLOBAL_STATE_ALIAS[type]);\n\n  const handleChange = (event) => {\n    setEntry(event.target.checked);\n  };\n\n  return (\n    <FormControl className={`form-item form-item--checkbox form-item--${classModifier}`}>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={entry}\n            onChange={handleChange}\n            name={GLOBAL_STATE_ALIAS[type]}\n            color=\"primary\"\n          />\n        }\n        label={FORM_LABELS[type]}\n      />\n    </FormControl>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { getHashData } from '../database';\nimport { getMonsterAdventureData, getClassColor } from '../utils';\nimport { TYPES, GLOBAL_STATE_ALIAS } from '../utils/constants';\nimport useGlobalState from '../useGlobalState';\n\n// Components\nimport FormInput from './FormInput';\nimport FormAutocomplete from './FormAutocomplete';\nimport FormAutocompleteMulti from './FormAutocompleteMulti';\nimport FormAttributes from './FormAttributes';\nimport FormAlignment from './FormAlignment';\nimport FormCheckbox from './FormCheckbox';\n\nexport default function Form() {\n  const [monster] = useGlobalState(GLOBAL_STATE_ALIAS[TYPES.MONSTER]);\n  const [characterClass] = useGlobalState(GLOBAL_STATE_ALIAS[TYPES.CLASS]);\n  const [, setColor] = useGlobalState('color');\n  // LocalState\n  const [adventureData, setAdventureData] = useState(null);\n\n  // When a monster is selected, determine available adventure cards for it\n  useEffect(() => {\n    if (monster) {\n      const monsterName = getHashData(TYPES.MONSTER)[monster].name;\n\n      setAdventureData({\n        location: getMonsterAdventureData(TYPES.MONSTER_LOCATION, monsterName),\n        obstacle: getMonsterAdventureData(TYPES.MONSTER_OBSTACLE, monsterName),\n        attack: getMonsterAdventureData(TYPES.MONSTER_ATTACK, monsterName),\n      });\n    }\n  }, [monster]);\n\n  // When a class is selected, set the global color\n  useEffect(() => {\n    setColor(getClassColor(characterClass));\n  }, [characterClass, setColor]);\n\n  return (\n    <main className=\"form\">\n      <FormInput type={TYPES.CHARACTER_NAME} classModifier=\"half\" />\n      <FormInput type={TYPES.PLAYER} classModifier=\"half\" />\n      <FormAutocomplete type={TYPES.RACE} classModifier=\"quarter\" />\n      <FormAutocomplete type={TYPES.CLASS} classModifier=\"quarter\" />\n      <FormAutocomplete type={TYPES.GENDER} classModifier=\"quarter\" />\n      <FormAutocomplete type={TYPES.BACKSTORY} classModifier=\"quarter\" />\n      <FormAttributes />\n      <FormAlignment />\n      <FormAutocompleteMulti type={TYPES.MARKET_ARMOR} classModifier=\"half\" />\n      <FormAutocompleteMulti type={TYPES.MARKET_WEAPON} classModifier=\"half\" />\n      <FormAutocompleteMulti type={TYPES.MARKET_SKILL} classModifier=\"half\" />\n      <FormAutocompleteMulti type={TYPES.MARKET_TRAIT} classModifier=\"half\" />\n      <FormAutocompleteMulti type={TYPES.MARKET_SCROLL} classModifier=\"half\" />\n      <FormAutocompleteMulti type={TYPES.MINION} classModifier=\"half\" />\n      <hr />\n      <FormAutocomplete type={TYPES.MONSTER} classModifier=\"half\" />\n      <FormCheckbox type={TYPES.MONSTER_LENTICULAR} classModifier=\"half\" />\n      <FormAutocomplete\n        type={TYPES.MONSTER_LOCATION}\n        classModifier=\"quarter\"\n        isDisabled={!monster}\n        data={adventureData?.location}\n      />\n      <FormAutocomplete\n        type={TYPES.MONSTER_OBSTACLE}\n        classModifier=\"quarter\"\n        isDisabled={!monster}\n        data={adventureData?.obstacle}\n      />\n      <FormAutocomplete\n        type={TYPES.MONSTER_ATTACK}\n        classModifier=\"quarter\"\n        isDisabled={!monster}\n        data={adventureData?.attack}\n      />\n      <FormInput type={TYPES.MONSTER_SCORE} inputType=\"number\" classModifier=\"quarter\" />\n      <hr />\n      <FormAutocomplete type={TYPES.FAMILIAR} classModifier=\"half\" />\n      <FormInput type={TYPES.FAMILIAR_POWER} inputType=\"number\" classModifier=\"quarter\" />\n      <FormInput type={TYPES.FAMILIAR_NAME} classModifier=\"quarter\" />\n      <FormAutocompleteMulti type={TYPES.FIENDS} classModifier=\"half\" />\n      <FormAutocompleteMulti type={TYPES.FIENDS_BANISHED} classModifier=\"half\" />\n      <hr />\n      <FormInput type={TYPES.XP} inputType=\"number\" classModifier=\"quarter\" />\n      <FormInput type={TYPES.GOLD} inputType=\"number\" classModifier=\"quarter\" />\n      <FormInput type={TYPES.SCORE} inputType=\"number\" classModifier=\"quarter\" />\n      <FormInput type={TYPES.DATE} inputType=\"date\" classModifier=\"quarter\" />\n    </main>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nimport { REFRESH_TIMER } from '../utils/constants';\n\nfunction CircularProgressWithLabel({ value }) {\n  return (\n    <Box position=\"relative\" display=\"inline-flex\">\n      <CircularProgress variant=\"static\" value={value} />\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n          value\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nexport default function Refreshing() {\n  const [progress, setProgress] = useState(1);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((prevProgress) => (prevProgress >= 100 ? 100 : prevProgress + 10));\n    }, REFRESH_TIMER / 10);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <main className=\"form form--refreshing\">\n      <CircularProgressWithLabel value={progress} />\n    </main>\n  );\n}\n","import React, { useCallback, useEffect, forwardRef } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\n\nimport useGlobalState, { getCompleteGlobalState } from '../useGlobalState';\nimport { DIALOGS } from '../utils/constants';\nimport {\n  determineCharacterCompletion,\n  getCharacterJsonApi,\n  getCharacterTextString,\n} from '../utils';\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function CodeDialog() {\n  const [activeDialog, setActiveDialog] = useGlobalState('activeDialog');\n  const [characterObject, setCharacterObject] = useGlobalState('characterObject');\n  const [isCharacterComplete, setIsCharacterComplete] = useGlobalState('isCharacterComplete');\n  const [, setIsCharacterGenerated] = useGlobalState('isCharacterGenerated');\n\n  useEffect(() => {\n    try {\n      const referenceObj = getCompleteGlobalState();\n      setIsCharacterComplete(determineCharacterCompletion(referenceObj));\n      setCharacterObject(getCharacterJsonApi(referenceObj));\n      setIsCharacterGenerated(true);\n    } catch (err) {\n      console.error(err);\n      setIsCharacterGenerated(false);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const handleCloseDialog = () => {\n    setActiveDialog(null);\n  };\n\n  const saveTextFile = useCallback(() => {\n    const referenceObj = getCompleteGlobalState();\n    const a = document.createElement('a');\n    const file = new Blob([getCharacterTextString(referenceObj)], { type: 'text/plain' });\n    a.href = URL.createObjectURL(file);\n    const characterName = referenceObj.characterName?.toLowerCase() ?? 'untitled';\n    a.download = `${characterName}-hero-totem.txt`;\n    a.click();\n  }, []);\n\n  return (\n    <Dialog\n      open={activeDialog === DIALOGS.CODE}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleCloseDialog}\n    >\n      <DialogTitle>Character Sheet JSON</DialogTitle>\n      <DialogContent>\n        <pre>{JSON.stringify(characterObject, null, 4)}</pre>\n      </DialogContent>\n      <DialogActions>\n        {!isCharacterComplete && (\n          <span className=\"dialog-alert\">This character sheet is incomplete</span>\n        )}\n        <Button onClick={saveTextFile} color=\"primary\" disabled={!isCharacterComplete}>\n          <CloudDownloadIcon /> Download\n        </Button>\n        <Button onClick={handleCloseDialog} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/functions';\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst fb = firebase.initializeApp(config);\n\nexport const API_FUNCTIONS = fb.functions();\n\nexport default fb.database();\n","import React, { forwardRef, useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\nimport Slide from '@material-ui/core/Slide';\n\nimport { getHashData } from '../database';\nimport { API_FUNCTIONS } from '../firebase';\nimport useGlobalState, { setCompleteGlobalState, initialState } from '../useGlobalState';\nimport { loadCharacterFromDatabase } from '../utils';\nimport { DIALOGS, TYPES, SCREENS, REFRESH_TIMER } from '../utils/constants';\n\nconst API = {\n  getCharacters: API_FUNCTIONS.httpsCallable('getRollPlayerCharacters'),\n};\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function ImportDialog() {\n  // Global States\n  const [activeDialog, setActiveDialog] = useGlobalState('activeDialog');\n  const [, setScreen] = useGlobalState('screen');\n  // Local states\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedCharacterId, setSelectedCharacterId] = useState(null);\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(() => {\n    async function getCharacters() {\n      try {\n        setIsLoading(true);\n        const response = await API.getCharacters();\n        setCharacters(response.data);\n      } catch (err) {\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getCharacters();\n  }, []);\n\n  const handleCloseDialog = () => {\n    setActiveDialog(null);\n  };\n\n  const handleLoadCharacter = () => {\n    setActiveDialog(null);\n    setScreen(SCREENS.REFRESH);\n\n    setTimeout(() => {\n      setCompleteGlobalState(\n        loadCharacterFromDatabase(characters, selectedCharacterId, initialState)\n      );\n      setScreen(SCREENS.FORM);\n    }, REFRESH_TIMER);\n  };\n\n  const handleSelectCharacter = (event) => {\n    setSelectedCharacterId(event.target.id);\n  };\n\n  return (\n    <Dialog\n      open={activeDialog === DIALOGS.IMPORT}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleCloseDialog}\n    >\n      <DialogTitle>Load Character</DialogTitle>\n      <DialogContent>\n        {isLoading ? (\n          <div className=\"import-list__loading\">\n            <CircularProgress />\n          </div>\n        ) : (\n          <ul className=\"import-list\">\n            {characters.map((character) => {\n              const selectedClass =\n                character.id === selectedCharacterId ? 'import-list__character--active' : '';\n              return (\n                <li key={character.id} className={`import-list__character ${selectedClass}`}>\n                  <button onClick={handleSelectCharacter} id={character.id}>\n                    <b>{character.name}</b>, a{' '}\n                    {getHashData(TYPES.RACE)[character.race].name ?? 'character'} created by{' '}\n                    {character.player}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCloseDialog} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button\n          onClick={handleLoadCharacter}\n          color=\"primary\"\n          disabled={isLoading || !Boolean(selectedCharacterId)}\n        >\n          <OpenInBrowserIcon /> Load Character\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { forwardRef, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport PrintIcon from '@material-ui/icons/Print';\n\nimport useGlobalState, { getCompleteGlobalState } from '../useGlobalState';\nimport { DIALOGS } from '../utils/constants';\n\nimport { determineCharacterCompletion, getCharacterJsonApi } from '../utils';\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function PrintDialog() {\n  const [activeDialog, setActiveDialog] = useGlobalState('activeDialog');\n  const [characterObject, setCharacterObject] = useGlobalState('characterObject');\n  const [, setIsCharacterComplete] = useGlobalState('isCharacterComplete');\n  const [, setIsCharacterGenerated] = useGlobalState('isCharacterGenerated');\n\n  useEffect(() => {\n    try {\n      const referenceObj = getCompleteGlobalState();\n      setIsCharacterComplete(determineCharacterCompletion(referenceObj));\n      setCharacterObject(getCharacterJsonApi(referenceObj));\n      setIsCharacterGenerated(true);\n    } catch (err) {\n      console.error(err);\n      setIsCharacterGenerated(false);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const handleCloseDialog = () => {\n    setActiveDialog(null);\n  };\n\n  const handlePrint = () => {\n    window.localStorage.setItem('roll-player-sheet', JSON.stringify(characterObject));\n    setActiveDialog(null);\n  };\n\n  return (\n    <Dialog\n      open={activeDialog === DIALOGS.PRINT}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleCloseDialog}\n    >\n      <DialogTitle>Print Character</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          You may print the character sheet for Roll Player or for Roll Player Adventures\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCloseDialog} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handlePrint} color=\"primary\" disabled>\n          <PrintIcon /> Print RPA\n        </Button>\n        <Button onClick={handlePrint} color=\"primary\" disabled>\n          <PrintIcon /> Print RP\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { forwardRef, useState, useEffect, useCallback } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport SaveIcon from '@material-ui/icons/Save';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\n\nimport { API_FUNCTIONS } from '../firebase';\n\nimport useGlobalState, { getCompleteGlobalState } from '../useGlobalState';\nimport { DIALOGS } from '../utils/constants';\nimport { determineCharacterCompletion, deserializeCharacter } from '../utils';\n\nconst API = {\n  saveCharacter: API_FUNCTIONS.httpsCallable('postRollPlayerCharacter'),\n  updateCharacter: API_FUNCTIONS.httpsCallable('putRollPlayerCharacter'),\n};\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function SaveDialog() {\n  const [activeDialog, setActiveDialog] = useGlobalState('activeDialog');\n  const [characterId, setCharacterId] = useGlobalState('characterId');\n  const [deserializedCharacter, setDeserializedCharacter] = useGlobalState('deserializedCharacter');\n  const [isCharacterComplete, setIsCharacterComplete] = useGlobalState('isCharacterComplete');\n  const [, setIsCharacterGenerated] = useGlobalState('isCharacterGenerated');\n  const [, setToaster] = useGlobalState('toaster');\n  // Local States\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [pw, setPW] = useState(null);\n  const [email, setEmail] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    try {\n      const referenceObj = getCompleteGlobalState();\n      setIsCharacterComplete(determineCharacterCompletion(referenceObj));\n      setDeserializedCharacter(deserializeCharacter(referenceObj));\n      setIsCharacterGenerated(true);\n    } catch (err) {\n      setIsCharacterGenerated(false);\n      console.error(err);\n      setToaster({ severity: 'error', message: 'Failed to get character' });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (pw && email) {\n      setIsLoggedIn(true);\n    }\n  }, [pw, email, setIsLoggedIn]);\n\n  const handleCloseDialog = () => {\n    setActiveDialog(null);\n  };\n\n  const handleSave = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      if (isCharacterComplete) {\n        let response;\n        if (characterId) {\n          response = await API.updateCharacter({\n            id: characterId,\n            ...deserializedCharacter,\n          });\n        } else {\n          response = await API.saveCharacter(deserializedCharacter);\n        }\n\n        setCharacterId(response.id);\n        setActiveDialog(null);\n      } else {\n        throw Error('Character is not complete');\n      }\n      setToaster({ severity: 'success', message: 'Character save successfully' });\n    } catch (err) {\n      console.error(err);\n      setToaster({ severity: 'error', message: `Failed to save character: ${err}` });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [\n    characterId,\n    deserializedCharacter,\n    isCharacterComplete,\n    setActiveDialog,\n    setCharacterId,\n    setToaster,\n  ]);\n\n  return (\n    <Dialog\n      open={activeDialog === DIALOGS.SAVE}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleCloseDialog}\n      className=\"\"\n    >\n      <DialogTitle>Save Character</DialogTitle>\n      <DialogContent>\n        {isLoading && (\n          <div className=\"import-list__loading\">\n            <CircularProgress />\n          </div>\n        )}\n        {!isLoggedIn && (\n          <FormControl className=\"save-login-form\">\n            <h3>Login</h3>\n            <TextField\n              id=\"email\"\n              label=\"E-mail\"\n              onChange={(e) => setEmail(e.target.value)}\n              type=\"email\"\n            />\n            <TextField\n              id=\"password\"\n              label=\"Password\"\n              onChange={(e) => setPW(e.target.value)}\n              type=\"password\"\n            />\n            <Button onClick={handleCloseDialog} variant=\"contained\" color=\"primary\">\n              Login\n            </Button>\n          </FormControl>\n        )}\n      </DialogContent>\n      <DialogActions>\n        {!isCharacterComplete && (\n          <span className=\"dialog-alert\">This character sheet is incomplete</span>\n        )}\n        <Button onClick={handleCloseDialog} color=\"secondary\" disabled={isLoading}>\n          Close\n        </Button>\n        <Button\n          onClick={handleSave}\n          color=\"primary\"\n          disabled={!isLoggedIn || !isCharacterComplete || isLoading}\n        >\n          <SaveIcon /> {characterId ? 'Update' : 'Save'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\n\nimport Header from './Header';\nimport Toaster from './Toaster';\n\nimport Form from './Form';\nimport Refreshing from './Refreshing';\n\nimport CodeDialog from './CodeDialog';\nimport ImportDialog from './ImportDialog';\nimport PrintDialog from './PrintDialog';\nimport SaveDialog from './SaveDialog';\n\nimport { DIALOGS, SCREENS } from '../utils/constants';\nimport useGlobalState from '../useGlobalState';\n\nconst activeComponent = {\n  [SCREENS.FORM]: <Form />,\n  [SCREENS.REFRESH]: <Refreshing />,\n};\n\nconst activeDialogComponent = {\n  [DIALOGS.CODE]: <CodeDialog />,\n  [DIALOGS.IMPORT]: <ImportDialog />,\n  [DIALOGS.PRINT]: <PrintDialog />,\n  [DIALOGS.SAVE]: <SaveDialog />,\n};\n\nexport default function App() {\n  const [screen] = useGlobalState('screen');\n  const [activeDialog] = useGlobalState('activeDialog');\n\n  return (\n    <Container maxWidth=\"lg\" className=\"app-container\">\n      <Header />\n      {activeComponent[screen]}\n      {activeDialogComponent[activeDialog]}\n      <Toaster />\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './stylesheets/index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}